{"version":3,"sources":["app/GullLayout/Layout2/Layout2Header.jsx","app/GullLayout/Layout2/Layout2Sidenav.jsx","app/GullLayout/Layout2/Layout2.jsx"],"names":["Layout2Header","state","shorcutMenuList","icon","link","text","notificationList","title","description","time","color","status","showSearchBox","handleMenuClick","props","setLayoutSettings","settings","merge","layout2Settings","leftSidebar","open","secondaryNavOpen","toggleFullScreen","document","fullscreenEnabled","fullscreen","exitFullscreen","documentElement","requestFullscreen","handleSearchBoxOpen","searchBox","this","className","src","alt","onClick","style","margin","data-fullscreen","Dropdown","Toggle","variant","role","Menu","map","menu","key","to","id","data-toggle","DropdownMenu","note","index","getTimeDifference","Date","DropdownToggle","aria-haspopup","aria-expanded","logoutUser","Component","withRouter","connect","setDefaultSettings","PropTypes","func","isRequired","user","layout","Layout2Sidenav","windowListener","selectedItem","navOpen","onMainItemMouseEnter","item","setSelected","findSelecteditem","navigations","forEach","sub","child","grandChild","path","history","location","pathname","onMainItemMouseLeave","setState","removeSelected","closeSecNav","other","isMobile","openSecNav","setTimeout","window","innerWidth","addEventListener","removeEventListener","classList","i","active","name","onMouseEnter","onMouseLeave","type","href","closeSecSidenav","Layout2","handleSearchBoxClose","routes","theme","header","show","fallback","Loading","renderRoutes","Footer","GullSearch","handleClose"],"mappings":"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","file":"static/js/92.2f3c385a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\nimport DropdownMenu from \"react-bootstrap/DropdownMenu\";\nimport { getTimeDifference } from \"@utils\";\nimport DropdownToggle from \"react-bootstrap/DropdownToggle\";\nimport { Link } from \"react-router-dom\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  setLayoutSettings,\n  setDefaultSettings\n} from \"app/redux/actions/LayoutActions\";\nimport { logoutUser } from \"app/redux/actions/UserActions\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { merge } from \"lodash\";\nimport MegaMenu from \"@gull/components/MegaMenu\";\n\nclass Layout2Header extends Component {\n  state = {\n    shorcutMenuList: [\n      {\n        icon: \"i-Shop-4\",\n        link: \"#\",\n        text: \"Home\"\n      },\n      {\n        icon: \"i-Library\",\n        link: \"#\",\n        text: \"Ui Kits\"\n      },\n      {\n        icon: \"i-Drop\",\n        link: \"#\",\n        text: \"Apps\"\n      },\n      {\n        icon: \"i-File-Clipboard-File--Text\",\n        link: \"#\",\n        text: \"Form\"\n      },\n      {\n        icon: \"i-Checked-User\",\n        link: \"#\",\n        text: \"Sessions\"\n      },\n      {\n        icon: \"i-Ambulance\",\n        link: \"#\",\n        text: \"Support\"\n      }\n    ],\n    notificationList: [\n      {\n        icon: \"i-Speach-Bubble-6\",\n        title: \"New message\",\n        description: \"James: Hey! are you busy?\",\n        time: \"2019-10-30T02:10:18.931Z\",\n        color: \"primary\",\n        status: \"New\"\n      },\n      {\n        icon: \"i-Receipt-3\",\n        title: \"New order received\",\n        description: \"1 Headphone, 3 iPhone\",\n        time: \"2019-03-10T02:10:18.931Z\",\n        color: \"success\",\n        status: \"New\"\n      },\n      {\n        icon: \"i-Empty-Box\",\n        title: \"Product out of stock\",\n        description: \"1 Headphone, 3 iPhone\",\n        time: \"2019-05-10T02:10:18.931Z\",\n        color: \"danger\",\n        status: \"3\"\n      },\n      {\n        icon: \"i-Data-Power\",\n        title: \"Server up!\",\n        description: \"Server rebooted successfully\",\n        time: \"2019-03-10T02:10:18.931Z\",\n        color: \"success\",\n        status: \"3\"\n      }\n    ],\n    showSearchBox: false\n  };\n\n  handleMenuClick = () => {\n    let { setLayoutSettings, settings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        layout2Settings: {\n          leftSidebar: {\n            open: !settings.layout2Settings.leftSidebar.open,\n            secondaryNavOpen: !settings.layout2Settings.leftSidebar.open\n          }\n        }\n      })\n    );\n  };\n\n  toggleFullScreen = () => {\n    if (document.fullscreenEnabled) {\n      if (!document.fullscreen) document.documentElement.requestFullscreen();\n      else document.exitFullscreen();\n    }\n  };\n\n  handleSearchBoxOpen = () => {\n    let { setLayoutSettings, settings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        layout2Settings: {\n          searchBox: {\n            open: true\n          }\n        }\n      })\n    );\n  };\n\n  render() {\n    let { shorcutMenuList = [], notificationList = [] } = this.state;\n\n    return (\n      <div className=\"main-header\">\n        <div className=\"logo\">\n          <img src=\"/assets/images/logo.png\" alt=\"\" onClick={this.handleMenuClick}/>\n        </div>\n\n        {/*<div className=\"menu-toggle\" onClick={this.handleMenuClick}>*/}\n        {/*  <div></div>*/}\n        {/*  <div></div>*/}\n        {/*  <div></div>*/}\n        {/*</div>*/}\n\n        {/*<div className=\"d-none d-lg-flex align-items-center\">*/}\n        {/*  <Dropdown className=\"mr-3\">*/}\n        {/*    <Dropdown.Toggle variant=\"link\" id=\"dropdown-basic\">*/}\n        {/*      Mega Menu*/}\n        {/*    </Dropdown.Toggle>*/}\n\n        {/*    <div className=\"mega-menu\">*/}\n        {/*      <Dropdown.Menu>*/}\n        {/*        <MegaMenu></MegaMenu>*/}\n        {/*      </Dropdown.Menu>*/}\n        {/*    </div>*/}\n        {/*  </Dropdown>*/}\n\n        {/*  <div className=\"search-bar\">*/}\n        {/*    <input*/}\n        {/*      type=\"text\"*/}\n        {/*      placeholder=\"Search\"*/}\n        {/*      onFocus={this.handleSearchBoxOpen}*/}\n        {/*    />*/}\n        {/*    <i className=\"search-icon text-muted i-Magnifi-Glass1\"></i>*/}\n        {/*  </div>*/}\n        {/*</div>*/}\n\n        <div style={{ margin: \"auto\" }}></div>\n\n        <div className=\"header-part-right\">\n          <i\n            className=\"i-Full-Screen header-icon d-none d-sm-inline-block\"\n            data-fullscreen\n            onClick={this.toggleFullScreen}\n          ></i>\n\n          <Dropdown>\n            <Dropdown.Toggle variant=\"link\" className=\"toggle-hidden\">\n              <i\n                className=\"i-Safe-Box text-muted header-icon\"\n                role=\"button\"\n              ></i>\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              <div className=\"menu-icon-grid\">\n                {shorcutMenuList.map(menu => (\n                  <Link key={menu.text} to={menu.link}>\n                    <i className={menu.icon}></i> {menu.text}\n                  </Link>\n                ))}\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown>\n            <Dropdown.Toggle variant=\"link\" className=\"toggle-hidden\">\n              <div\n                className=\"badge-top-container\"\n                role=\"button\"\n                id=\"dropdownNotification\"\n                data-toggle=\"dropdown\"\n              >\n                <span className=\"badge badge-primary\">3</span>\n                <i className=\"i-Bell text-muted header-icon\"></i>\n              </div>\n            </Dropdown.Toggle>\n\n            <DropdownMenu className=\"notification-dropdown rtl-ps-none\">\n              {notificationList.map((note, index) => (\n                <div key={index} className=\"dropdown-item d-flex\">\n                  <div className=\"notification-icon\">\n                    <i className={`${note.icon} text-${note.color} mr-1`}></i>\n                  </div>\n                  <div className=\"notification-details flex-grow-1\">\n                    <p className=\"m-0 d-flex align-items-center\">\n                      <span>{note.title}</span>\n                      <span\n                        className={`badge badge-pill badge-${note.color} ml-1 mr-1`}\n                      >\n                        {note.status}\n                      </span>\n                      <span className=\"flex-grow-1\"></span>\n                      <span className=\"text-small text-muted ml-auto\">\n                        {getTimeDifference(new Date(note.time))} ago\n                      </span>\n                    </p>\n                    <p className=\"text-small text-muted m-0\">\n                      {note.description}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </DropdownMenu>\n          </Dropdown>\n\n          <div className=\"user col align-self-end\">\n            <Dropdown>\n              <DropdownToggle variant=\"link\" className=\"toggle-hidden\">\n                <img\n                  src=\"/assets/images/faces/1.jpg\"\n                  id=\"userDropdown\"\n                  alt=\"\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\"\n                />\n              </DropdownToggle>\n              <DropdownMenu>\n                <div className=\"dropdown-header\">\n                  <i className=\"i-Lock-User mr-1\"></i> Timothy Carlson\n                </div>\n                <span className=\"dropdown-item cursor-pointer\">Account settings</span>\n                <span className=\"dropdown-item cursor-pointer\">Billing history</span>\n                <span\n                  className=\"dropdown-item cursor-pointer\"\n                  onClick={this.props.logoutUser}\n                >\n                  Sign out\n                </span>\n              </DropdownMenu>\n            </Dropdown>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nLayout2Header.propTypes = {\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  logoutUser: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired,\n  settings: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  setDefaultSettings: PropTypes.func.isRequired,\n  setLayoutSettings: PropTypes.func.isRequired,\n  logoutUser: PropTypes.func.isRequired,\n  user: state.user,\n  settings: state.layout.settings\n});\n\nexport default withRouter(\n  connect(mapStateToProps, {\n    setLayoutSettings,\n    setDefaultSettings,\n    logoutUser\n  })(Layout2Header)\n);\n","import React, { Component } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { navigations } from \"../../navigations\";\nimport { merge } from \"lodash\";\nimport { classList, isMobile } from \"@utils\";\nimport Srcollbar from \"react-perfect-scrollbar\";\nimport { DropDownMenu } from \"@gull\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  setLayoutSettings\n} from \"app/redux/actions/LayoutActions\";\nimport { logoutUser } from \"app/redux/actions/UserActions\";\nimport { withRouter } from \"react-router-dom\";\n\nclass Layout2Sidenav extends Component {\n  windowListener = null;\n  state = {\n    selectedItem: {},\n    navOpen: true,\n    secondaryNavOpen: false\n  };\n\n  onMainItemMouseEnter = item => {\n    this.setSelected(item);\n  };\n\n  findSelecteditem = () => {\n    navigations.forEach(item => {\n      if (item.sub) {\n        item.sub.forEach(child => {\n          if (child.sub) {\n            child.sub.forEach(grandChild => {\n              if (grandChild.path == this.props.history.location.pathname) {\n                this.setSelected(item);\n              }\n            });\n          } else {\n            if (child.path == this.props.history.location.pathname) {\n              this.setSelected(item);\n            }\n          }\n        });\n      } else {\n        if (item.path == this.props.history.location.pathname) {\n          this.setSelected(item);\n        }\n      }\n    });\n  };\n\n  onMainItemMouseLeave = () => {};\n\n  setSelected = selectedItem => {\n    this.setState({ selectedItem });\n    // console.log(selectedItem);\n  };\n\n  removeSelected = () => {\n    this.setState({ selectedItem: null });\n    // console.log('removed');\n  };\n\n  closeSecNav = () => {\n    // console.log(\"closing sec sidenav\");\n    let { setLayoutSettings, settings } = this.props;\n    let other = {};\n\n    if (isMobile()) {\n      other.open = false;\n    }\n\n    setLayoutSettings(\n      merge({}, settings, {\n        layout2Settings: {\n          leftSidebar: {\n            ...other,\n            secondaryNavOpen: false\n          }\n        }\n      })\n    );\n  };\n\n  openSecNav = () => {\n    let { setLayoutSettings, settings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        layout2Settings: {\n          leftSidebar: {\n            open: true,\n            secondaryNavOpen: true\n          }\n        }\n      })\n    );\n  };\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.findSelecteditem();\n    })\n    if (window)\n      if (window.innerWidth < 1200) {\n        this.closeSecNav();\n      } else {\n        this.openSecNav();\n      }\n\n    this.windowListener = window.addEventListener(\"resize\", () => {\n      if (window.innerWidth < 1200) {\n        this.closeSecNav();\n      } else {\n        this.openSecNav();\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.windowListener) {\n      window.removeEventListener(\"resize\", this.windowListener);\n    }\n  }\n\n  render() {\n    let { settings } = this.props;\n    let { selectedItem } = this.state;\n\n    return (\n      <div className=\"side-content-wrap\">\n        <Srcollbar\n          className={classList({\n            \"sidebar-left o-hidden rtl-ps-none\": true,\n            open: settings.layout2Settings.leftSidebar.open\n          })}\n        >\n          <ul className=\"navigation-left\">\n            {navigations.map((item, i) => (\n              <li\n                className={classList({\n                  \"nav-item\": true,\n                  active: item.name === selectedItem.name\n                })}\n                onMouseEnter={() => {\n                  this.onMainItemMouseEnter(item);\n                }}\n                onMouseLeave={this.onMainItemMouseLeave}\n                key={i}\n              >\n                {item.path && item.type !== \"extLink\" && (\n                  <NavLink className=\"nav-item-hold\" to={item.path}>\n                    <i className={`nav-icon ${item.icon}`}></i>\n                    <span className=\"nav-text\">{item.name}</span>\n                  </NavLink>\n                )}\n                {item.path && item.type === \"extLink\" && (\n                  <a className=\"nav-item-hold\" href={item.path}>\n                    <i className={`nav-icon ${item.icon}`}></i>\n                    <span className=\"nav-text\">{item.name}</span>\n                  </a>\n                )}\n                {!item.path && (\n                  <div className=\"nav-item-hold\">\n                    <i className={`nav-icon ${item.icon}`}></i>\n                    <span className=\"nav-text\">{item.name}</span>\n                  </div>\n                )}\n                <div className=\"triangle\"></div>\n              </li>\n            ))}\n          </ul>\n        </Srcollbar>\n\n        <Srcollbar\n          className={classList({\n            \"sidebar-left-secondary o-hidden rtl-ps-none\": true,\n            open: settings.layout2Settings.leftSidebar.secondaryNavOpen\n          })}\n        >\n          <i className=\"sidebar-close i-Close\" onClick={this.closeSecNav}></i>\n          <div className=\"logo ml-4 mb-4\">\n            <img src=\"/assets/images/logo-text.png\" alt=\"logo\" />\n          </div>\n          <div className=\"header mb-3 ml-4\">\n            <h5 className=\"font-weight-bold mb-1\">{selectedItem.name}</h5>\n            <p>{selectedItem.description}</p>\n          </div>\n          {selectedItem && selectedItem.sub && (\n            <DropDownMenu\n              menu={selectedItem.sub}\n              closeSecSidenav={this.closeSecNav}\n            ></DropDownMenu>\n          )}\n        </Srcollbar>\n        <div\n          className={classList({\n            \"sidebar-overlay\": true,\n            open: settings.layout2Settings.leftSidebar.secondaryNavOpen\n          })}\n        ></div>\n      </div>\n    );\n  }\n}\n\nLayout2Sidenav.propTypes = {\n  setLayoutSettings: PropTypes.func.isRequired,\n  settings: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  setLayoutSettings: PropTypes.func.isRequired,\n  settings: state.layout.settings\n});\n\nexport default withRouter(\n  connect(mapStateToProps, {\n    setLayoutSettings\n  })(Layout2Sidenav)\n);\n","import React, { Component, Suspense } from \"react\";\nimport { renderRoutes } from \"react-router-config\";\n\nimport Footer from \"../SharedComponents/Footer\";\nimport Layout2Header from \"./Layout2Header\";\nimport Layout2Sidenav from \"./Layout2Sidenav\";\n\nimport { connect } from \"react-redux\";\n\nimport { classList } from \"@utils\";\nimport { merge } from \"lodash\";\nimport { setLayoutSettings } from \"app/redux/actions/LayoutActions\";\nimport GullSearch from \"@gull/components/GullSearch\";\nimport Loading from \"@gull/components/GullLoadable/Loading\";\n\nclass Layout2 extends Component {\n  state = {};\n\n  handleSearchBoxClose = () => {\n    let { setLayoutSettings, settings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        layout2Settings: {\n          searchBox: {\n            open: false\n          }\n        }\n      })\n    );\n  };\n\n  render() {\n    let { settings, routes } = this.props;\n\n    return (\n      <div>\n        <div\n          className={`${classList({\n            \"app-admin-wrap layout-sidebar-compact clearfix\": true,\n            \"sidenav-open\": settings.layout2Settings.leftSidebar.open\n          })} ${settings.layout2Settings.leftSidebar.theme}`}\n        >\n          <Layout2Sidenav></Layout2Sidenav>\n          {/* sidebar */}\n\n          <div\n            className={classList({\n              \"main-content-wrap d-flex flex-column\": true,\n              \"sidenav-open\": settings.layout2Settings.leftSidebar.open\n            })}\n          >\n            {(settings.layout2Settings.header.show && <Layout2Header></Layout2Header>)}\n            <Suspense fallback={<Loading />}>\n              <div className=\"main-content\">{renderRoutes(routes)}</div>\n            </Suspense>\n            <Footer></Footer>\n          </div>\n        </div>\n        <GullSearch\n          open={settings.layout2Settings.searchBox.open}\n          handleClose={this.handleSearchBoxClose}\n        ></GullSearch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  settings: state.layout.settings\n});\n\nexport default connect(mapStateToProps, { setLayoutSettings })(Layout2);\n"],"sourceRoot":""}