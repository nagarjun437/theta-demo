{"version":3,"sources":["app/views/extra-kits/AppImageCropper.jsx"],"names":["AppImageCropper","state","src","crop","aspect","img","handleFileSelect","event","file","target","files","URL","createObjectURL","setState","handleCrop","a","getCroppedImg","croppedImage","image","fileName","canvas","document","createElement","scaleX","naturalWidth","width","scaleY","naturalHeight","height","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","name","this","routeSegments","path","htmlFor","className","as","onChange","id","type","accept","onClick","circularCrop","onImageLoaded","newCrop","Component"],"mappings":"8OAKMA,E,4MACJC,MAAQ,CACNC,IAAK,kCACLC,KAAM,CAAEC,OAAQ,GAChBC,IAAK,M,EAGPC,iBAAmB,SAAAC,GACjB,IAAIC,EAAOD,EAAME,OAAOC,MAAM,GAC1BR,EAAMS,IAAIC,gBAAgBJ,GAC9B,EAAKK,SAAS,CACZX,S,EAIJY,W,sBAAa,kCAAAC,EAAA,2DACS,EAAKd,MAAnBE,EADK,EACLA,KAAME,EADD,EACCA,IADD,iEAIc,EAAKW,cAAcX,EAAKF,EAAM,QAJ5C,OAIPc,EAJO,OAKX,EAAKJ,SAAS,CAAEX,IAAKS,IAAIC,gBAAgBK,KAL9B,2C,EAQbD,cAAgB,SAACE,EAAOf,EAAMgB,GAC5B,IAAMC,EAASC,SAASC,cAAc,UAChCC,EAASL,EAAMM,aAAeN,EAAMO,MACpCC,EAASR,EAAMS,cAAgBT,EAAMU,OAsB3C,OApBAR,EAAOK,MAAQtB,EAAKsB,MACpBL,EAAOQ,OAASzB,EAAKyB,OACTR,EAAOS,WAAW,MAE1BC,UACFZ,EACAf,EAAK4B,EAAIR,EACTpB,EAAK6B,EAAIN,EACTvB,EAAKsB,MAAQF,EACbpB,EAAKyB,OAASF,EACd,EACA,EACAvB,EAAKsB,MACLtB,EAAKyB,QAOA,IAAIK,SAAQ,SAACC,EAASC,GAC3Bf,EAAOgB,QACL,SAAAC,GACEA,EAAKC,KAAOnB,EACZe,EAAQG,KAEV,aACA,O,4CAKN,WAAU,IAAD,OACP,EAAoBE,KAAKtC,MAAnBC,EAAN,EAAMA,IAAKC,EAAX,EAAWA,KAEX,OACE,6BACE,kBAAC,IAAD,CACEqC,cAAe,CACb,CAAEF,KAAM,OAAQG,KAAM,KACtB,CAAEH,KAAM,aAAcG,KAAM,eAC5B,CAAEH,KAAM,oBAGZ,2BAAOI,QAAQ,sBACb,kBAAC,IAAD,CAAQC,UAAU,wBAAwBC,GAAG,QAC3C,yBAAKD,UAAU,oBACb,uBAAGA,UAAU,oBAAb,KACA,gDAIN,2BACEA,UAAU,SACVE,SAAUN,KAAKjC,iBACfwC,GAAG,qBACHC,KAAK,OACLC,OAAO,YAGT,kBAAC,IAAD,CAAQC,QAASV,KAAKzB,WAAY6B,UAAU,oBAA5C,cAIA,yBAAKA,UAAU,WACb,kBAAC,IAAD,CACEzC,IAAKA,EACLC,KAAMA,EACN+C,cAAc,EACdC,cAAe,SAAAjC,GAAK,OAAI,EAAKL,SAAS,CAAER,IAAKa,KAC7C2B,SAAU,SAAAO,GACR,EAAKvC,SAAS,CAAEV,KAAMiD,a,GAnGNC,aA4GfrD","file":"static/js/107.d0374189.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Breadcrumb, SimpleCard } from \"@gull\";\nimport ReactCrop from \"react-image-crop\";\nimport { Button } from \"react-bootstrap\";\n\nclass AppImageCropper extends Component {\n  state = {\n    src: \"/assets/images/photo-wide-3.jpg\",\n    crop: { aspect: 1 / 1 },\n    img: null\n  };\n\n  handleFileSelect = event => {\n    let file = event.target.files[0];\n    let src = URL.createObjectURL(file);\n    this.setState({\n      src\n    });\n  };\n\n  handleCrop = async () => {\n    let { crop, img } = this.state;\n    if (!img) return;\n\n    let croppedImage = await this.getCroppedImg(img, crop, \"test\");\n    this.setState({ src: URL.createObjectURL(croppedImage) });\n  };\n\n  getCroppedImg = (image, crop, fileName) => {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    // As Base64 string\n    // const base64Image = canvas.toDataURL('image/jpeg');\n\n    // As a blob\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(\n        blob => {\n          blob.name = fileName;\n          resolve(blob);\n        },\n        \"image/jpeg\",\n        1\n      );\n    });\n  };\n\n  render() {\n    let { src, crop } = this.state;\n\n    return (\n      <div>\n        <Breadcrumb\n          routeSegments={[\n            { name: \"Home\", path: \"/\" },\n            { name: \"Extra Kits\", path: \"/extra-kits\" },\n            { name: \"Image Cropper\" }\n          ]}\n        ></Breadcrumb>\n        <label htmlFor=\"upload-single-file\">\n          <Button className=\"btn-rounded mr-3 mb-3\" as=\"span\">\n            <div className=\"flex flex-middle\">\n              <i className=\"i-Share-on-Cloud\"> </i>\n              <span>Single File</span>\n            </div>\n          </Button>\n        </label>\n        <input\n          className=\"d-none\"\n          onChange={this.handleFileSelect}\n          id=\"upload-single-file\"\n          type=\"file\"\n          accept=\"image/*\"\n        />\n\n        <Button onClick={this.handleCrop} className=\"btn-rounded mb-3\">\n          Crop Image\n        </Button>\n\n        <div className=\"d-block\">\n          <ReactCrop\n            src={src}\n            crop={crop}\n            circularCrop={true}\n            onImageLoaded={image => this.setState({ img: image })}\n            onChange={newCrop => {\n              this.setState({ crop: newCrop });\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AppImageCropper;\n"],"sourceRoot":""}