{"ast":null,"code":"import _classCallCheck from\"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/gull-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/gull-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/gull-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/gull-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component,Suspense}from\"react\";import{connect}from\"react-redux\";import{PropTypes}from\"prop-types\";import{withRouter}from\"react-router-dom\";import AppContext from\"app/appContext\";import{setLayoutSettings,setDefaultSettings}from\"app/redux/actions/LayoutActions\";import{GullLayouts}from\".\";import Customizer from\"./SharedComponents/Customizer\";var GullLayout=/*#__PURE__*/function(_Component){_inherits(GullLayout,_Component);var _super=_createSuper(GullLayout);function GullLayout(){var _this;_classCallCheck(this,GullLayout);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={};_this.initAppDirection=function(){var settings=_this.props.settings;setTimeout(function(){document.documentElement.setAttribute('dir',settings.dir);});};return _this;}_createClass(GullLayout,[{key:\"componentDidUpdate\",value:// constructor(props, context) {\n//   super(props);\n//   this.appContext = context;\n//   this.updateSettingsFromRouter();\n//   // Set settings from query (Only for demo purpose)\n//   this.setLayoutFromQuery();\n// }\nfunction componentDidUpdate(prevProps){if(this.props.location.pathname!==prevProps.location.pathname){// initCodeViewer();\n// this.updateSettingsFromRouter();\n}}},{key:\"componentDidMount\",value:function componentDidMount(){this.initAppDirection();}// updateSettingsFromRouter() {\n//   const { routes } = this.appContext;\n//   const matched = matchRoutes(routes, this.props.location.pathname)[0];\n//   let { defaultSettings, settings, setLayoutSettings } = this.props;\n//   if (matched && matched.route.settings) {\n//     // ROUTE HAS SETTINGS\n//     console.log(matched.route.settings);\n//     const updatedSettings = merge({}, settings, matched.route.settings);\n//     if (!isEqual(settings, updatedSettings)) {\n//       setLayoutSettings(updatedSettings);\n//       // console.log('Route has settings');\n//     }\n//   } else if (!isEqual(settings, defaultSettings)) {\n//     console.log(\"routes not found\");\n//     setLayoutSettings(defaultSettings);\n//     // console.log('reset settings', defaultSettings);\n//   }\n// }\n// setLayoutFromQuery = () => {\n//   try {\n//     let settingsFromQuery = getQueryParam(\"settings\");\n//     settingsFromQuery = settingsFromQuery\n//       ? JSON.parse(settingsFromQuery)\n//       : {};\n//     let { settings, setLayoutSettings, setDefaultSettings } = this.props;\n//     let updatedSettings = merge({}, settings, settingsFromQuery);\n//     setLayoutSettings(updatedSettings);\n//     setDefaultSettings(updatedSettings);\n//   } catch (e) {\n//     // console.log(\"Error! Set settings from query param\", e);\n//   }\n// };\n},{key:\"render\",value:function render(){var _this$props=this.props,activeLayout=_this$props.activeLayout,route=_this$props.route,settings=_this$props.settings;var Layout=GullLayouts[activeLayout];return/*#__PURE__*/React.createElement(Suspense,null,/*#__PURE__*/React.createElement(Layout,{routes:route.routes}),settings.customizer.show&&/*#__PURE__*/React.createElement(Customizer,null));}}]);return GullLayout;}(Component);var mapStateToProps=function mapStateToProps(state){return{setLayoutSettings:PropTypes.func.isRequired,setDefaultSettings:PropTypes.func.isRequired,settings:state.layout.settings,activeLayout:state.layout.settings.activeLayout,defaultSettings:state.layout.defaultSettings};};GullLayout.contextType=AppContext;export default withRouter(connect(mapStateToProps,{setLayoutSettings:setLayoutSettings,setDefaultSettings:setDefaultSettings})(GullLayout));","map":{"version":3,"sources":["/Users/arjun/Documents/Personal/Test/Theta/UI Theme/gull-admin/react/src/app/GullLayout/GullLayout.jsx"],"names":["React","Component","Suspense","connect","PropTypes","withRouter","AppContext","setLayoutSettings","setDefaultSettings","GullLayouts","Customizer","GullLayout","state","initAppDirection","settings","props","setTimeout","document","documentElement","setAttribute","dir","prevProps","location","pathname","activeLayout","route","Layout","routes","customizer","show","mapStateToProps","func","isRequired","layout","defaultSettings","contextType"],"mappings":"4tBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,SAAT,KAA0B,YAA1B,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,UAAP,KAAuB,gBAAvB,CACA,OACEC,iBADF,CAEEC,kBAFF,KAGO,iCAHP,CAKA,OAASC,WAAT,KAA4B,GAA5B,CACA,MAAOC,CAAAA,UAAP,KAAuB,+BAAvB,C,GAEMC,CAAAA,U,2UACJC,K,CAAQ,E,OA2DRC,gB,CAAmB,UAAM,CACvB,GAAMC,CAAAA,QAAN,CAAmB,MAAKC,KAAxB,CAAMD,QAAN,CACAE,UAAU,CAAC,UAAM,CACfC,QAAQ,CAACC,eAAT,CAAyBC,YAAzB,CAAsC,KAAtC,CAA6CL,QAAQ,CAACM,GAAtD,EACD,CAFS,CAAV,CAGD,C,wEA9DD;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,4BAAmBC,SAAnB,CAA8B,CAC5B,GAAI,KAAKN,KAAL,CAAWO,QAAX,CAAoBC,QAApB,GAAiCF,SAAS,CAACC,QAAV,CAAmBC,QAAxD,CAAkE,CAChE;AACA;AACD,CACF,C,iCACD,4BAAoB,CAClB,KAAKV,gBAAL,GACD,CAED;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;sBASA,iBAAS,CACP,gBAAwC,KAAKE,KAA7C,CAAMS,YAAN,aAAMA,YAAN,CAAoBC,KAApB,aAAoBA,KAApB,CAA2BX,QAA3B,aAA2BA,QAA3B,CACA,GAAIY,CAAAA,MAAM,CAAGjB,WAAW,CAACe,YAAD,CAAxB,CACA,mBACE,oBAAC,QAAD,mBACE,oBAAC,MAAD,EAAQ,MAAM,CAAEC,KAAK,CAACE,MAAtB,EADF,CAEIb,QAAQ,CAACc,UAAT,CAAoBC,IAApB,eAA4B,oBAAC,UAAD,MAFhC,CADF,CAMD,C,wBA5EsB5B,S,EA+EzB,GAAM6B,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAlB,KAAK,QAAK,CAChCL,iBAAiB,CAAEH,SAAS,CAAC2B,IAAV,CAAeC,UADF,CAEhCxB,kBAAkB,CAAEJ,SAAS,CAAC2B,IAAV,CAAeC,UAFH,CAGhClB,QAAQ,CAAEF,KAAK,CAACqB,MAAN,CAAanB,QAHS,CAIhCU,YAAY,CAAEZ,KAAK,CAACqB,MAAN,CAAanB,QAAb,CAAsBU,YAJJ,CAKhCU,eAAe,CAAEtB,KAAK,CAACqB,MAAN,CAAaC,eALE,CAAL,EAA7B,CAQAvB,UAAU,CAACwB,WAAX,CAAyB7B,UAAzB,CAEA,cAAeD,CAAAA,UAAU,CACvBF,OAAO,CAAC2B,eAAD,CAAkB,CAAEvB,iBAAiB,CAAjBA,iBAAF,CAAqBC,kBAAkB,CAAlBA,kBAArB,CAAlB,CAAP,CACEG,UADF,CADuB,CAAzB","sourcesContent":["import React, { Component, Suspense } from \"react\";\nimport { connect } from \"react-redux\";\nimport { PropTypes } from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport AppContext from \"app/appContext\";\nimport {\n  setLayoutSettings,\n  setDefaultSettings\n} from \"app/redux/actions/LayoutActions\";\n\nimport { GullLayouts } from \".\";\nimport Customizer from \"./SharedComponents/Customizer\";\n\nclass GullLayout extends Component {\n  state = {};\n\n  // constructor(props, context) {\n  //   super(props);\n  //   this.appContext = context;\n  //   this.updateSettingsFromRouter();\n\n  //   // Set settings from query (Only for demo purpose)\n  //   this.setLayoutFromQuery();\n  // }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      // initCodeViewer();\n      // this.updateSettingsFromRouter();\n    }\n  }\n  componentDidMount() {\n    this.initAppDirection();\n  }\n\n  // updateSettingsFromRouter() {\n  //   const { routes } = this.appContext;\n  //   const matched = matchRoutes(routes, this.props.location.pathname)[0];\n  //   let { defaultSettings, settings, setLayoutSettings } = this.props;\n\n  //   if (matched && matched.route.settings) {\n  //     // ROUTE HAS SETTINGS\n  //     console.log(matched.route.settings);\n\n  //     const updatedSettings = merge({}, settings, matched.route.settings);\n  //     if (!isEqual(settings, updatedSettings)) {\n  //       setLayoutSettings(updatedSettings);\n  //       // console.log('Route has settings');\n  //     }\n  //   } else if (!isEqual(settings, defaultSettings)) {\n  //     console.log(\"routes not found\");\n\n  //     setLayoutSettings(defaultSettings);\n  //     // console.log('reset settings', defaultSettings);\n  //   }\n  // }\n\n  // setLayoutFromQuery = () => {\n  //   try {\n  //     let settingsFromQuery = getQueryParam(\"settings\");\n  //     settingsFromQuery = settingsFromQuery\n  //       ? JSON.parse(settingsFromQuery)\n  //       : {};\n  //     let { settings, setLayoutSettings, setDefaultSettings } = this.props;\n  //     let updatedSettings = merge({}, settings, settingsFromQuery);\n\n  //     setLayoutSettings(updatedSettings);\n  //     setDefaultSettings(updatedSettings);\n  //   } catch (e) {\n  //     // console.log(\"Error! Set settings from query param\", e);\n  //   }\n  // };\n\n  initAppDirection = () => {\n    let { settings } = this.props;\n    setTimeout(() => {\n      document.documentElement.setAttribute('dir', settings.dir);\n    });\n  }\n\n  render() {\n    let { activeLayout, route, settings } = this.props;\n    let Layout = GullLayouts[activeLayout];\n    return (\n      <Suspense>\n        <Layout routes={route.routes}></Layout>\n        {(settings.customizer.show && <Customizer></Customizer>)}\n      </Suspense>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  settings: state.layout.settings,\n  activeLayout: state.layout.settings.activeLayout,\n  defaultSettings: state.layout.defaultSettings\n});\n\nGullLayout.contextType = AppContext;\n\nexport default withRouter(\n  connect(mapStateToProps, { setLayoutSettings, setDefaultSettings })(\n    GullLayout\n  )\n);\n"]},"metadata":{},"sourceType":"module"}