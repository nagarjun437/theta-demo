{"ast":null,"code":"import React from\"react\";import{Modal,Form,FormGroup,FormLabel,FormControl,Col,Card,Button}from\"react-bootstrap\";import{Formik}from\"formik\";import DatePicker from\"react-datepicker\";import{CirclePicker}from\"react-color\";import*as yup from\"yup\";var CalendarEventDialog=function CalendarEventDialog(_ref){var open=_ref.open,eventObject=_ref.eventObject,handleSubmit=_ref.handleSubmit,handleDeleteEvent=_ref.handleDeleteEvent,closeDialog=_ref.closeDialog;var handleFormSubmit=function handleFormSubmit(values){handleSubmit(values);};return/*#__PURE__*/React.createElement(Modal,{show:open,centered:true,size:\"lg\",className:\"d-flex justify-content-center mx-auto\",style:{maxWidth:\"500px\"},onHide:closeDialog},/*#__PURE__*/React.createElement(Formik,{enableReinitialize:true,initialValues:eventObject,onSubmit:handleFormSubmit,validationSchema:eventSchema},function(_ref2){var values=_ref2.values,errors=_ref2.errors,touched=_ref2.touched,handleChange=_ref2.handleChange,handleBlur=_ref2.handleBlur,handleSubmit=_ref2.handleSubmit,isSubmitting=_ref2.isSubmitting,setSubmitting=_ref2.setSubmitting,setFieldValue=_ref2.setFieldValue;return/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(Card.Header,{className:\"bg-primary text-white d-flex flex-wrap justify-content-between align-items-center\"},/*#__PURE__*/React.createElement(\"h4\",{className:\"m-0 text-white\"},\"New Event\"),/*#__PURE__*/React.createElement(\"i\",{className:\"i-Close-Window cursor-pointer text-18\",onClick:closeDialog})),/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(Form,{onSubmit:handleSubmit},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,\"Title\"),/*#__PURE__*/React.createElement(FormControl,{type:\"text\",name:\"title\",className:\"mb-3\",onChange:handleChange,onBlur:handleBlur,value:values.title,isInvalid:errors.title&&touched.title})),/*#__PURE__*/React.createElement(Form.Row,null,/*#__PURE__*/React.createElement(FormGroup,{as:Col},/*#__PURE__*/React.createElement(FormLabel,null,\"Start Date\"),/*#__PURE__*/React.createElement(DatePicker,{className:\"form-control mb-1 w-100\",dateFormat:\"dd/MM/yyyy\",selected:values.start?new Date(values.start):new Date(),onChange:function onChange(date){setFieldValue(\"start\",date);}})),/*#__PURE__*/React.createElement(FormGroup,{as:Col},/*#__PURE__*/React.createElement(FormLabel,null,\"End Date\"),/*#__PURE__*/React.createElement(DatePicker,{className:\"form-control mb-1\",dateFormat:\"dd/MM/yyyy\",selected:values.end?new Date(values.end):new Date(),onChange:function onChange(date){setFieldValue(\"end\",date);}}))),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"label\",{className:\"checkbox checkbox-primary\"},/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",name:\"allDay\",value:values.allDay,checked:values.allDay,onChange:handleChange,onBlur:handleBlur// required\n}),/*#__PURE__*/React.createElement(\"span\",null,\"All day\"),/*#__PURE__*/React.createElement(\"span\",{className:\"checkmark\"}))),/*#__PURE__*/React.createElement(CirclePicker,{className:\"w-100 mb-4\",color:values.color,onChangeComplete:function onChangeComplete(_ref3){var hex=_ref3.hex;return setFieldValue(\"color\",hex);}}),/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex justify-content-between\"},/*#__PURE__*/React.createElement(Button,{type:\"submit\",variant:\"primary\"},\"Save\"),/*#__PURE__*/React.createElement(Button,{type:\"button\",variant:\"danger\",onClick:function onClick(){return handleDeleteEvent(values.id);}},/*#__PURE__*/React.createElement(\"i\",{className:\"i-Delete-File\"},\" \"),\"Delete\")))));}));};var eventSchema=yup.object().shape({title:yup.string().required(\"Title is required\"),start:yup.string().required(\"Start date is required\")});export default CalendarEventDialog;","map":{"version":3,"sources":["/Users/arjun/Documents/Personal/Test/Theta/UI Theme/theta-demo/src/app/views/app/calendar/CalendarEventDialog.jsx"],"names":["React","Modal","Form","FormGroup","FormLabel","FormControl","Col","Card","Button","Formik","DatePicker","CirclePicker","yup","CalendarEventDialog","open","eventObject","handleSubmit","handleDeleteEvent","closeDialog","handleFormSubmit","values","maxWidth","eventSchema","errors","touched","handleChange","handleBlur","isSubmitting","setSubmitting","setFieldValue","title","start","Date","date","end","allDay","color","hex","id","object","shape","string","required"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Modal,\n  Form,\n  FormGroup,\n  FormLabel,\n  FormControl,\n  Col,\n  Card,\n  Button\n} from \"react-bootstrap\";\nimport { Formik } from \"formik\";\nimport DatePicker from \"react-datepicker\";\nimport { CirclePicker } from \"react-color\";\nimport * as yup from \"yup\";\n\nconst CalendarEventDialog = ({\n  open,\n  eventObject,\n  handleSubmit,\n  handleDeleteEvent,\n  closeDialog\n}) => {\n  const handleFormSubmit = values => {\n    handleSubmit(values);\n  };\n\n  return (\n    <Modal\n      show={open}\n      centered={true}\n      size=\"lg\"\n      className=\"d-flex justify-content-center mx-auto\"\n      style={{ maxWidth: \"500px\" }}\n      onHide={closeDialog}\n    >\n      <Formik\n        enableReinitialize={true}\n        initialValues={eventObject}\n        onSubmit={handleFormSubmit}\n        validationSchema={eventSchema}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting,\n          setSubmitting,\n          setFieldValue\n        }) => {\n          return (\n            <Card>\n              <Card.Header className=\"bg-primary text-white d-flex flex-wrap justify-content-between align-items-center\">\n                <h4 className=\"m-0 text-white\">New Event</h4>\n                <i\n                  className=\"i-Close-Window cursor-pointer text-18\"\n                  onClick={closeDialog}\n                ></i>\n              </Card.Header>\n              <Card.Body>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup>\n                    <FormLabel>Title</FormLabel>\n                    <FormControl\n                      type=\"text\"\n                      name=\"title\"\n                      className=\"mb-3\"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      value={values.title}\n                      isInvalid={errors.title && touched.title}\n                    />\n                  </FormGroup>\n                  <Form.Row>\n                    <FormGroup as={Col}>\n                      <FormLabel>Start Date</FormLabel>\n                      <DatePicker\n                        className=\"form-control mb-1 w-100\"\n                        dateFormat=\"dd/MM/yyyy\"\n                        selected={\n                          values.start ? new Date(values.start) : new Date()\n                        }\n                        onChange={date => {\n                          setFieldValue(\"start\", date);\n                        }}\n                      />\n                    </FormGroup>\n                    <FormGroup as={Col}>\n                      <FormLabel>End Date</FormLabel>\n                      <DatePicker\n                        className=\"form-control mb-1\"\n                        dateFormat=\"dd/MM/yyyy\"\n                        selected={\n                          values.end ? new Date(values.end) : new Date()\n                        }\n                        onChange={date => {\n                          setFieldValue(\"end\", date);\n                        }}\n                      />\n                    </FormGroup>\n                  </Form.Row>\n                  <p>\n                    <label className=\"checkbox checkbox-primary\">\n                      <input\n                        type=\"checkbox\"\n                        name=\"allDay\"\n                        value={values.allDay}\n                        checked={values.allDay}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        // required\n                      />\n                      <span>All day</span>\n                      <span className=\"checkmark\"></span>\n                    </label>\n                  </p>\n                  <CirclePicker\n                    className=\"w-100 mb-4\"\n                    color={values.color}\n                    onChangeComplete={({ hex }) => setFieldValue(\"color\", hex)}\n                  />\n                  <div className=\"d-flex justify-content-between\">\n                    <Button type=\"submit\" variant=\"primary\">\n                      Save\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"danger\"\n                      onClick={() => handleDeleteEvent(values.id)}\n                    >\n                      <i className=\"i-Delete-File\"> </i>\n                      Delete\n                    </Button>\n                  </div>\n                </Form>\n              </Card.Body>\n            </Card>\n          );\n        }}\n      </Formik>\n    </Modal>\n  );\n};\n\nconst eventSchema = yup.object().shape({\n  title: yup.string().required(\"Title is required\"),\n  start: yup.string().required(\"Start date is required\")\n});\n\nexport default CalendarEventDialog;\n"]},"metadata":{},"sourceType":"module"}