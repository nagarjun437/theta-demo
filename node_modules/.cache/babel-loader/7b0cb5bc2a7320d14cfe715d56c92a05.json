{"ast":null,"code":"var _jsxFileName = \"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/gull-admin/react/src/app/GullLayout/GullLayout.jsx\";\nimport React, { Component, Suspense } from \"react\";\nimport { connect } from \"react-redux\";\nimport { PropTypes } from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport AppContext from \"app/appContext\";\nimport { setLayoutSettings, setDefaultSettings } from \"app/redux/actions/LayoutActions\";\nimport { GullLayouts } from \".\";\nimport Customizer from \"./SharedComponents/Customizer\";\n\nclass GullLayout extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.initAppDirection = () => {\n      let {\n        settings\n      } = this.props;\n      setTimeout(() => {\n        document.documentElement.setAttribute('dir', settings.dir);\n      });\n    };\n  }\n\n  // constructor(props, context) {\n  //   super(props);\n  //   this.appContext = context;\n  //   this.updateSettingsFromRouter();\n  //   // Set settings from query (Only for demo purpose)\n  //   this.setLayoutFromQuery();\n  // }\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {// initCodeViewer();\n      // this.updateSettingsFromRouter();\n    }\n  }\n\n  componentDidMount() {\n    this.initAppDirection();\n  } // updateSettingsFromRouter() {\n  //   const { routes } = this.appContext;\n  //   const matched = matchRoutes(routes, this.props.location.pathname)[0];\n  //   let { defaultSettings, settings, setLayoutSettings } = this.props;\n  //   if (matched && matched.route.settings) {\n  //     // ROUTE HAS SETTINGS\n  //     console.log(matched.route.settings);\n  //     const updatedSettings = merge({}, settings, matched.route.settings);\n  //     if (!isEqual(settings, updatedSettings)) {\n  //       setLayoutSettings(updatedSettings);\n  //       // console.log('Route has settings');\n  //     }\n  //   } else if (!isEqual(settings, defaultSettings)) {\n  //     console.log(\"routes not found\");\n  //     setLayoutSettings(defaultSettings);\n  //     // console.log('reset settings', defaultSettings);\n  //   }\n  // }\n  // setLayoutFromQuery = () => {\n  //   try {\n  //     let settingsFromQuery = getQueryParam(\"settings\");\n  //     settingsFromQuery = settingsFromQuery\n  //       ? JSON.parse(settingsFromQuery)\n  //       : {};\n  //     let { settings, setLayoutSettings, setDefaultSettings } = this.props;\n  //     let updatedSettings = merge({}, settings, settingsFromQuery);\n  //     setLayoutSettings(updatedSettings);\n  //     setDefaultSettings(updatedSettings);\n  //   } catch (e) {\n  //     // console.log(\"Error! Set settings from query param\", e);\n  //   }\n  // };\n\n\n  render() {\n    let {\n      activeLayout,\n      route,\n      settings\n    } = this.props;\n    let Layout = GullLayouts[activeLayout];\n    return /*#__PURE__*/React.createElement(Suspense, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Layout, {\n      routes: route.routes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }), settings.customizer.show && /*#__PURE__*/React.createElement(Customizer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 39\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  settings: state.layout.settings,\n  activeLayout: state.layout.settings.activeLayout,\n  defaultSettings: state.layout.defaultSettings\n});\n\nGullLayout.contextType = AppContext;\nexport default withRouter(connect(mapStateToProps, {\n  setLayoutSettings,\n  setDefaultSettings\n})(GullLayout));","map":{"version":3,"sources":["/Users/arjun/Documents/Personal/Test/Theta/UI Theme/gull-admin/react/src/app/GullLayout/GullLayout.jsx"],"names":["React","Component","Suspense","connect","PropTypes","withRouter","AppContext","setLayoutSettings","setDefaultSettings","GullLayouts","Customizer","GullLayout","state","initAppDirection","settings","props","setTimeout","document","documentElement","setAttribute","dir","componentDidUpdate","prevProps","location","pathname","componentDidMount","render","activeLayout","route","Layout","routes","customizer","show","mapStateToProps","func","isRequired","layout","defaultSettings","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,SACEC,iBADF,EAEEC,kBAFF,QAGO,iCAHP;AAKA,SAASC,WAAT,QAA4B,GAA5B;AACA,OAAOC,UAAP,MAAuB,+BAAvB;;AAEA,MAAMC,UAAN,SAAyBV,SAAzB,CAAmC;AAAA;AAAA;AAAA,SACjCW,KADiC,GACzB,EADyB;;AAAA,SA4DjCC,gBA5DiC,GA4Dd,MAAM;AACvB,UAAI;AAAEC,QAAAA;AAAF,UAAe,KAAKC,KAAxB;AACAC,MAAAA,UAAU,CAAC,MAAM;AACfC,QAAAA,QAAQ,CAACC,eAAT,CAAyBC,YAAzB,CAAsC,KAAtC,EAA6CL,QAAQ,CAACM,GAAtD;AACD,OAFS,CAAV;AAGD,KAjEgC;AAAA;;AAGjC;AACA;AACA;AACA;AAEA;AACA;AACA;AAEAC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAI,KAAKP,KAAL,CAAWQ,QAAX,CAAoBC,QAApB,KAAiCF,SAAS,CAACC,QAAV,CAAmBC,QAAxD,EAAkE,CAChE;AACA;AACD;AACF;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKZ,gBAAL;AACD,GApBgC,CAsBjC;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AASAa,EAAAA,MAAM,GAAG;AACP,QAAI;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA,KAAhB;AAAuBd,MAAAA;AAAvB,QAAoC,KAAKC,KAA7C;AACA,QAAIc,MAAM,GAAGpB,WAAW,CAACkB,YAAD,CAAxB;AACA,wBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,MAAM,EAAEC,KAAK,CAACE,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEIhB,QAAQ,CAACiB,UAAT,CAAoBC,IAApB,iBAA4B,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFhC,CADF;AAMD;;AA5EgC;;AA+EnC,MAAMC,eAAe,GAAGrB,KAAK,KAAK;AAChCL,EAAAA,iBAAiB,EAAEH,SAAS,CAAC8B,IAAV,CAAeC,UADF;AAEhC3B,EAAAA,kBAAkB,EAAEJ,SAAS,CAAC8B,IAAV,CAAeC,UAFH;AAGhCrB,EAAAA,QAAQ,EAAEF,KAAK,CAACwB,MAAN,CAAatB,QAHS;AAIhCa,EAAAA,YAAY,EAAEf,KAAK,CAACwB,MAAN,CAAatB,QAAb,CAAsBa,YAJJ;AAKhCU,EAAAA,eAAe,EAAEzB,KAAK,CAACwB,MAAN,CAAaC;AALE,CAAL,CAA7B;;AAQA1B,UAAU,CAAC2B,WAAX,GAAyBhC,UAAzB;AAEA,eAAeD,UAAU,CACvBF,OAAO,CAAC8B,eAAD,EAAkB;AAAE1B,EAAAA,iBAAF;AAAqBC,EAAAA;AAArB,CAAlB,CAAP,CACEG,UADF,CADuB,CAAzB","sourcesContent":["import React, { Component, Suspense } from \"react\";\nimport { connect } from \"react-redux\";\nimport { PropTypes } from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport AppContext from \"app/appContext\";\nimport {\n  setLayoutSettings,\n  setDefaultSettings\n} from \"app/redux/actions/LayoutActions\";\n\nimport { GullLayouts } from \".\";\nimport Customizer from \"./SharedComponents/Customizer\";\n\nclass GullLayout extends Component {\n  state = {};\n\n  // constructor(props, context) {\n  //   super(props);\n  //   this.appContext = context;\n  //   this.updateSettingsFromRouter();\n\n  //   // Set settings from query (Only for demo purpose)\n  //   this.setLayoutFromQuery();\n  // }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      // initCodeViewer();\n      // this.updateSettingsFromRouter();\n    }\n  }\n  componentDidMount() {\n    this.initAppDirection();\n  }\n\n  // updateSettingsFromRouter() {\n  //   const { routes } = this.appContext;\n  //   const matched = matchRoutes(routes, this.props.location.pathname)[0];\n  //   let { defaultSettings, settings, setLayoutSettings } = this.props;\n\n  //   if (matched && matched.route.settings) {\n  //     // ROUTE HAS SETTINGS\n  //     console.log(matched.route.settings);\n\n  //     const updatedSettings = merge({}, settings, matched.route.settings);\n  //     if (!isEqual(settings, updatedSettings)) {\n  //       setLayoutSettings(updatedSettings);\n  //       // console.log('Route has settings');\n  //     }\n  //   } else if (!isEqual(settings, defaultSettings)) {\n  //     console.log(\"routes not found\");\n\n  //     setLayoutSettings(defaultSettings);\n  //     // console.log('reset settings', defaultSettings);\n  //   }\n  // }\n\n  // setLayoutFromQuery = () => {\n  //   try {\n  //     let settingsFromQuery = getQueryParam(\"settings\");\n  //     settingsFromQuery = settingsFromQuery\n  //       ? JSON.parse(settingsFromQuery)\n  //       : {};\n  //     let { settings, setLayoutSettings, setDefaultSettings } = this.props;\n  //     let updatedSettings = merge({}, settings, settingsFromQuery);\n\n  //     setLayoutSettings(updatedSettings);\n  //     setDefaultSettings(updatedSettings);\n  //   } catch (e) {\n  //     // console.log(\"Error! Set settings from query param\", e);\n  //   }\n  // };\n\n  initAppDirection = () => {\n    let { settings } = this.props;\n    setTimeout(() => {\n      document.documentElement.setAttribute('dir', settings.dir);\n    });\n  }\n\n  render() {\n    let { activeLayout, route, settings } = this.props;\n    let Layout = GullLayouts[activeLayout];\n    return (\n      <Suspense>\n        <Layout routes={route.routes}></Layout>\n        {(settings.customizer.show && <Customizer></Customizer>)}\n      </Suspense>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  settings: state.layout.settings,\n  activeLayout: state.layout.settings.activeLayout,\n  defaultSettings: state.layout.defaultSettings\n});\n\nGullLayout.contextType = AppContext;\n\nexport default withRouter(\n  connect(mapStateToProps, { setLayoutSettings, setDefaultSettings })(\n    GullLayout\n  )\n);\n"]},"metadata":{},"sourceType":"module"}