{"ast":null,"code":"import React from\"react\";import{Modal,FormGroup,FormControl}from\"react-bootstrap\";import{Formik}from\"formik\";import*as yup from\"yup\";var ContactEditor=function ContactEditor(_ref){var show=_ref.show,initialValues=_ref.initialValues,toggleEditorDialog=_ref.toggleEditorDialog,handleFormSubmit=_ref.handleFormSubmit;return/*#__PURE__*/React.createElement(Modal,{show:show,onHide:toggleEditorDialog,centered:true},/*#__PURE__*/React.createElement(\"div\",{className:\"modal-header\"},/*#__PURE__*/React.createElement(\"h5\",{className:\"modal-title\",id:\"exampleModalLabel\"},initialValues?\"Update\":\"New\",\" Contact\"),/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:\"close\",\"aria-label\":\"Close\",onClick:function onClick(){return toggleEditorDialog(false);}},/*#__PURE__*/React.createElement(\"span\",{\"aria-hidden\":\"true\"},\"\\xD7\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"modal-body\"},/*#__PURE__*/React.createElement(Formik,{initialValues:initialValues?initialValues:{name:\"\",email:\"\",phone:\"\",note:\"\"},validationSchema:contactSchema,enableReinitialize:true,onSubmit:handleFormSubmit},function(_ref2){var values=_ref2.values,errors=_ref2.errors,touched=_ref2.touched,handleChange=_ref2.handleChange,handleBlur=_ref2.handleBlur,handleSubmit=_ref2.handleSubmit,isSubmitting=_ref2.isSubmitting,setFieldValue=_ref2.setFieldValue;return/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormControl,{placeholder:\"Name...\",name:\"name\",onChange:handleChange,onBlur:handleBlur,isInvalid:errors.name&&touched.name,value:values.name})),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormControl,{placeholder:\"Enter email....\",name:\"email\",onChange:handleChange,onBlur:handleBlur,isInvalid:errors.email&&touched.email,value:values.email})),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormControl,{placeholder:\"Phone....\",name:\"phone\",onChange:handleChange,onBlur:handleBlur,isInvalid:errors.phone&&touched.phone,value:values.phone})),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormControl,{placeholder:\"Notes....\",name:\"note\",as:\"textarea\",onChange:handleChange,onBlur:handleBlur,isInvalid:errors.note&&touched.note,value:values.note})),/*#__PURE__*/React.createElement(\"div\",{className:\"modal-footer\"},/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:\"btn btn-secondary\",onClick:function onClick(){return toggleEditorDialog(false);}},\"Close\"),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\",className:\"btn btn-primary\"},\"Save changes\")));})));};var contactSchema=yup.object().shape({name:yup.string().required(\"title is required\"),email:yup.string().email().required(\"note is required\"),phone:yup.string().required(\"note is required\")});export default ContactEditor;","map":{"version":3,"sources":["/Users/arjun/Documents/Personal/Test/Theta/UI Theme/gull-admin/react/src/app/views/app/contact/ContactEditor.jsx"],"names":["React","Modal","FormGroup","FormControl","Formik","yup","ContactEditor","show","initialValues","toggleEditorDialog","handleFormSubmit","name","email","phone","note","contactSchema","values","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldValue","object","shape","string","required"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Modal, FormGroup, FormControl } from \"react-bootstrap\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\n\nconst ContactEditor = ({\n  show,\n  initialValues,\n  toggleEditorDialog,\n  handleFormSubmit\n}) => {\n  return (\n    <Modal show={show} onHide={toggleEditorDialog} centered>\n      <div className=\"modal-header\">\n        <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n          {initialValues ? \"Update\" : \"New\"} Contact\n        </h5>\n        <button\n          type=\"button\"\n          className=\"close\"\n          aria-label=\"Close\"\n          onClick={() => toggleEditorDialog(false)}\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div className=\"modal-body\">\n        <Formik\n          initialValues={\n            initialValues\n              ? initialValues\n              : { name: \"\", email: \"\", phone: \"\", note: \"\" }\n          }\n          validationSchema={contactSchema}\n          enableReinitialize={true}\n          onSubmit={handleFormSubmit}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isSubmitting,\n            setFieldValue\n          }) => (\n            <form onSubmit={handleSubmit}>\n              <FormGroup>\n                <FormControl\n                  placeholder=\"Name...\"\n                  name=\"name\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  isInvalid={errors.name && touched.name}\n                  value={values.name}\n                ></FormControl>\n              </FormGroup>\n              <FormGroup>\n                <FormControl\n                  placeholder=\"Enter email....\"\n                  name=\"email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  isInvalid={errors.email && touched.email}\n                  value={values.email}\n                ></FormControl>\n              </FormGroup>\n              <FormGroup>\n                <FormControl\n                  placeholder=\"Phone....\"\n                  name=\"phone\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  isInvalid={errors.phone && touched.phone}\n                  value={values.phone}\n                ></FormControl>\n              </FormGroup>\n              <FormGroup>\n                <FormControl\n                  placeholder=\"Notes....\"\n                  name=\"note\"\n                  as=\"textarea\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  isInvalid={errors.note && touched.note}\n                  value={values.note}\n                ></FormControl>\n              </FormGroup>\n              <div className=\"modal-footer\">\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  onClick={() => toggleEditorDialog(false)}\n                >\n                  Close\n                </button>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Save changes\n                </button>\n              </div>\n            </form>\n          )}\n        </Formik>\n      </div>\n    </Modal>\n  );\n};\n\nconst contactSchema = yup.object().shape({\n  name: yup.string().required(\"title is required\"),\n  email: yup\n    .string()\n    .email()\n    .required(\"note is required\"),\n  phone: yup.string().required(\"note is required\")\n});\n\nexport default ContactEditor;\n"]},"metadata":{},"sourceType":"module"}