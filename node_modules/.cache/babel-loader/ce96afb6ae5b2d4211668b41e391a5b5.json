{"ast":null,"code":"import Mock from \"../mock\";\nimport shortid from \"shortid\";\nconst date = new Date();\nconst calendarEventDB = {\n  events: [{\n    id: \"344jdfher3wh23\",\n    title: \"Meeting with all employees\",\n    start: new Date(date.getFullYear(), date.getMonth(), 1),\n    end: new Date(date.getFullYear(), date.getMonth(), 3),\n    classNames: [\"text-white\"],\n    allDay: true\n  }, {\n    id: \"344jdfher3wh245\",\n    title: \"A trip to Bali Island\",\n    start: new Date(),\n    end: new Date(date.getFullYear(), date.getMonth(), date.getDate() + 2),\n    classNames: [\"text-white\"],\n    allDay: true\n  }]\n};\nMock.onGet(\"/api/calendar/events/all\").reply(config => {\n  return [200, calendarEventDB.events];\n});\nMock.onPost(\"/api/calendar/events/add\").reply(config => {\n  let {\n    start,\n    end,\n    ...others\n  } = JSON.parse(config.data);\n  let event = {\n    id: shortid.generate(),\n    start: new Date(start),\n    end: new Date(end),\n    ...others\n  };\n  calendarEventDB.events.push(event);\n  return [200, calendarEventDB.events];\n});\nMock.onPost(\"/api/calendar/events/update\").reply(config => {\n  let updatedEvent = JSON.parse(config.data);\n  calendarEventDB.events = calendarEventDB.events.map(event => {\n    if (event.id === updatedEvent.id) {\n      return { ...updatedEvent\n      };\n    }\n\n    return event;\n  });\n  return [200, calendarEventDB.events];\n});\nMock.onPost(\"/api/calendar/events/delete\").reply(config => {\n  let event = JSON.parse(config.data);\n  calendarEventDB.events.map((element, i) => {\n    if (element.id === event.id) {\n      return [200, calendarEventDB.events.splice(i, 1)];\n    }\n  });\n  return [200, calendarEventDB.events];\n});","map":{"version":3,"sources":["/Users/arjun/Documents/Personal/Test/Theta/UI Theme/gull-admin/react/src/fake-db/db/calendarEvents.js"],"names":["Mock","shortid","date","Date","calendarEventDB","events","id","title","start","getFullYear","getMonth","end","classNames","allDay","getDate","onGet","reply","config","onPost","others","JSON","parse","data","event","generate","push","updatedEvent","map","element","i","splice"],"mappings":"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","sourcesContent":["import Mock from \"../mock\";\nimport shortid from \"shortid\";\nconst date = new Date();\n\nconst calendarEventDB = {\n  events: [\n    {\n      id: \"344jdfher3wh23\",\n      title: \"Meeting with all employees\",\n      start: new Date(date.getFullYear(), date.getMonth(), 1),\n      end: new Date(date.getFullYear(), date.getMonth(), 3),\n      classNames: [\"text-white\"],\n      allDay: true\n    },\n    {\n      id: \"344jdfher3wh245\",\n      title: \"A trip to Bali Island\",\n      start: new Date(),\n      end: new Date(date.getFullYear(), date.getMonth(), date.getDate() + 2),\n      classNames: [\"text-white\"],\n      allDay: true\n    }\n  ]\n};\n\nMock.onGet(\"/api/calendar/events/all\").reply(config => {\n  return [200, calendarEventDB.events];\n});\n\nMock.onPost(\"/api/calendar/events/add\").reply(config => {\n  let { start, end, ...others } = JSON.parse(config.data);\n  let event = {\n    id: shortid.generate(),\n    start: new Date(start),\n    end: new Date(end),\n    ...others\n  };\n  calendarEventDB.events.push(event);\n  return [200, calendarEventDB.events];\n});\n\nMock.onPost(\"/api/calendar/events/update\").reply(config => {\n  let updatedEvent = JSON.parse(config.data);\n  calendarEventDB.events = calendarEventDB.events.map(event => {\n    if (event.id === updatedEvent.id) {\n      return { ...updatedEvent };\n    }\n    return event;\n  });\n\n  return [200, calendarEventDB.events];\n});\n\nMock.onPost(\"/api/calendar/events/delete\").reply(config => {\n  let event = JSON.parse(config.data);\n\n  calendarEventDB.events.map((element, i) => {\n    if (element.id === event.id) {\n      return [200, calendarEventDB.events.splice(i, 1)];\n    }\n  });\n\n  return [200, calendarEventDB.events];\n});\n"]},"metadata":{},"sourceType":"module"}