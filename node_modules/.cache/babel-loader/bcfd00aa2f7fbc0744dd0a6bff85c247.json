{"ast":null,"code":"var _jsxFileName = \"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/theta-demo/src/app/views/forms/FormValidation.jsx\";\nimport React, { Component } from \"react\";\nimport { Breadcrumb } from \"@gull\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { classList } from \"@utils\";\n\nclass FormValidation extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      username: \"\",\n      city: \"\",\n      cardNumber: \"4444444444444444\",\n      state: \"\",\n      password: \"\",\n      repassword: \"\",\n      zip: \"\",\n      agree: [],\n      //returns ['on'] when on/checked\n      checkbox1: \"\",\n      checkbox2: \"\",\n      radio: \"\",\n      range: {\n        startDate: new Date(),\n        endDate: (() => {\n          let date = new Date();\n          date.setDate(date.getDate() + 7);\n          return date;\n        })()\n      }\n    };\n\n    this.handleSubmit = (values, {\n      setSubmitting\n    }) => {\n      console.log(values);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Breadcrumb, {\n      routeSegments: [{\n        name: \"Forms\",\n        path: \"/forms\"\n      }, {\n        name: \"Form Validation\"\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, \"For custom Bootstrap form validation messages, you\\u2019ll need to add the \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 19\n      }\n    }, \"novalidate\"), \" boolean attribute to your\", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    }, \"form\"), \". This disables the browser default feedback tooltips, but still provides access to the form validation APIs in JavaScript. Try to submit the form below; our JavaScript will intercept the submit button and relay feedback to you. When attempting to submit, you\\u2019ll see the \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 52\n      }\n    }, \":invalid\"), \" and\", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }\n    }, \":valid\"), \" styles applied to your form controls.\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Formik, {\n      initialValues: this.state,\n      validationSchema: basicFormSchema,\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, ({\n      values,\n      errors,\n      touched,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      isSubmitting\n    }) => {\n      return /*#__PURE__*/React.createElement(\"form\", {\n        className: \"needs-validation\",\n        onSubmit: handleSubmit,\n        noValidate: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classList({\n          \"col-md-4 mb-3\": true,\n          \"valid-field\": !errors.firstName && touched.firstName,\n          \"invalid-field\": errors.firstName && touched.firstName\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"validationCustom202\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }\n      }, \"First name\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"validationCustom202\",\n        placeholder: \"First name\",\n        name: \"firstName\",\n        value: values.firstName,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"valid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }\n      }, \"Looks good!\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 29\n        }\n      }, \"First name is required\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: classList({\n          \"col-md-4 mb-3\": true,\n          \"valid-field\": touched.lastName && !errors.lastName,\n          \"invalid-field\": touched.lastName && errors.lastName\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"validationCustom222\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 29\n        }\n      }, \"Last name\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"validationCustom222\",\n        placeholder: \"Last name\",\n        value: values.lastName,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        name: \"lastName\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"valid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 29\n        }\n      }, \"Looks good!\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 29\n        }\n      }, \"Last name is required\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: classList({\n          \"col-md-4 mb-3\": true,\n          \"valid-field\": touched.username && !errors.username,\n          \"invalid-field\": touched.username && errors.username\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"validationCustomUsername\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 29\n        }\n      }, \"Username\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group-prepend\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"input-group-text\",\n        id: \"inputGroupPrepend\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 33\n        }\n      }, \"@\")), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"validationCustomUsername\",\n        placeholder: \"Username\",\n        \"aria-describedby\": \"inputGroupPrepend\",\n        name: \"username\",\n        onChange: handleChange,\n        onBlur: handleBlur,\n        value: values.username,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 31\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 31\n        }\n      }, \"Please choose a username.\")))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classList({\n          \"col-md-4 mb-3\": true,\n          \"valid-field\": touched.city && !errors.city,\n          \"invalid-field\": touched.city && errors.city\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"validationCustom03\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 29\n        }\n      }, \"City\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"validationCustom03\",\n        placeholder: \"City\",\n        name: \"city\",\n        value: values.city,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 29\n        }\n      }, \"Please provide a valid city.\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: classList({\n          \"col-md-4 mb-3\": true,\n          \"valid-field\": touched.state && !errors.state,\n          \"invalid-field\": touched.state && errors.state\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"validationCustom204\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 29\n        }\n      }, \"State\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"validationCustom204\",\n        placeholder: \"State\",\n        name: \"state\",\n        value: values.state,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 29\n        }\n      }, \"Please provide a valid state.\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: classList({\n          \"col-md-4 mb-3\": true,\n          \"valid-field\": touched.zip && !errors.zip,\n          \"invalid-field\": touched.zip && errors.zip\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"validationCustom05\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 29\n        }\n      }, \"Zip\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"number\",\n        className: \"form-control\",\n        id: \"validationCustom05\",\n        placeholder: \"Zip\",\n        name: \"zip\",\n        value: values.zip,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 29\n        }\n      }, \"Please provide a valid zip.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: classList({\n          \"col-md-4 mb-3\": true,\n          \"valid-field\": touched.agree && !errors.agree && values.agree.length,\n          \"invalid-field\": touched.agree && errors.agree && !values.agree.length\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"checkbox checkbox-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        name: \"agree\",\n        value: values.agree,\n        checked: values.agree.length,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 29\n        }\n      }, \"Agree to terms and conditions\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"checkmark\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 27\n        }\n      }, \"You must agree before submitting.\")), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 25\n        }\n      }, \"Submit form\"));\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }\n    }, \"Tooltip message\"), /*#__PURE__*/React.createElement(Formik, {\n      initialValues: this.state,\n      validationSchema: basicFormSchema,\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }\n    }, ({\n      values,\n      errors,\n      touched,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      isSubmitting\n    }) => {\n      return /*#__PURE__*/React.createElement(\"form\", {\n        className: \"needs-validation\",\n        onSubmit: handleSubmit,\n        noValidate: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classList({\n          \"col-md-4 mb-3\": true,\n          \"valid-field\": !errors.firstName && touched.firstName,\n          \"invalid-field\": errors.firstName && touched.firstName\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"validationCustom01\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 29\n        }\n      }, \"First name\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"validationCustom01\",\n        placeholder: \"First name\",\n        name: \"firstName\",\n        value: values.firstName,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"valid-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 29\n        }\n      }, \"Looks good!\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"invalid-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 29\n        }\n      }, \"First name is required\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: classList({\n          \"col-md-4 mb-3\": true,\n          \"valid-field\": touched.lastName && !errors.lastName,\n          \"invalid-field\": touched.lastName && errors.lastName\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"validationCustom02\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 29\n        }\n      }, \"Last name\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"validationCustom02\",\n        placeholder: \"Last name\",\n        value: values.lastName,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        name: \"lastName\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"valid-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 29\n        }\n      }, \"Looks good!\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"invalid-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 29\n        }\n      }, \"Last name is required\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: classList({\n          \"col-md-4 mb-3\": true,\n          \"valid-field\": touched.username && !errors.username,\n          \"invalid-field\": touched.username && errors.username\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"validationCustomUsername1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 29\n        }\n      }, \"Username\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group-prepend\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"input-group-text\",\n        id: \"inputGroupPrepend\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 33\n        }\n      }, \"@\")), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"validationCustomUsername1\",\n        placeholder: \"Username\",\n        \"aria-describedby\": \"inputGroupPrepend\",\n        name: \"username\",\n        onChange: handleChange,\n        onBlur: handleBlur,\n        value: values.username,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 31\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"invalid-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 31\n        }\n      }, \"Please choose a username.\")))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classList({\n          \"col-md-4 mb-3\": true,\n          \"valid-field\": touched.city && !errors.city,\n          \"invalid-field\": touched.city && errors.city\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"validationCustom203\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 29\n        }\n      }, \"City\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"validationCustom203\",\n        placeholder: \"City\",\n        name: \"city\",\n        value: values.city,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"invalid-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 29\n        }\n      }, \"Please provide a valid city.\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: classList({\n          \"col-md-4 mb-3\": true,\n          \"valid-field\": touched.state && !errors.state,\n          \"invalid-field\": touched.state && errors.state\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"validationCustom04\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 29\n        }\n      }, \"State\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"validationCustom04\",\n        placeholder: \"State\",\n        name: \"state\",\n        value: values.state,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"invalid-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 29\n        }\n      }, \"Please provide a valid state.\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: classList({\n          \"col-md-4 mb-3\": true,\n          \"valid-field\": touched.zip && !errors.zip,\n          \"invalid-field\": touched.zip && errors.zip\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"validationCustom205\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 29\n        }\n      }, \"Zip\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"number\",\n        className: \"form-control\",\n        id: \"validationCustom205\",\n        placeholder: \"Zip\",\n        name: \"zip\",\n        value: values.zip,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"invalid-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 29\n        }\n      }, \"Please provide a valid zip.\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: classList({\n          \"col-md-4 mb-3\": true,\n          \"valid-field\": touched.agree && !errors.agree && values.agree.length,\n          \"invalid-field\": touched.agree && errors.agree && !values.agree.length\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"checkbox checkbox-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        name: \"agree\",\n        value: values.agree,\n        checked: values.agree.length,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 29\n        }\n      }, \"Agree to terms and conditions\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"checkmark\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"invalid-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 27\n        }\n      }, \"You must agree before submitting.\")), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 25\n        }\n      }, \"Submit form\"));\n    }))))));\n  }\n\n}\n\nconst basicFormSchema = yup.object().shape({\n  firstName: yup.string().required(\"first name is required\"),\n  lastName: yup.string().required(\"last name is required\"),\n  username: yup.string().required(\"select any option\"),\n  city: yup.string().required(\"birthDay is required\"),\n  zip: yup.number().required(\"email is required\"),\n  agree: yup.string().required(\"Required\"),\n  state: yup.string().required(\"Required\")\n});\nconst tooltipFormSchema = yup.object().shape({\n  firstName: yup.string().required(\"first name is required\"),\n  lastName: yup.string().required(\"last name is required\"),\n  username: yup.string().required(\"select any option\"),\n  city: yup.string().required(\"birthDay is required\"),\n  zip: yup.number().required(\"email is required\"),\n  agree: yup.string().required(\"Required\"),\n  state: yup.string().required(\"Required\")\n});\nexport default FormValidation;","map":{"version":3,"sources":["/Users/arjun/Documents/Personal/Test/Theta/UI Theme/theta-demo/src/app/views/forms/FormValidation.jsx"],"names":["React","Component","Breadcrumb","Formik","yup","classList","FormValidation","state","firstName","lastName","phone","username","city","cardNumber","password","repassword","zip","agree","checkbox1","checkbox2","radio","range","startDate","Date","endDate","date","setDate","getDate","handleSubmit","values","setSubmitting","console","log","render","name","path","basicFormSchema","errors","touched","handleChange","handleBlur","isSubmitting","length","object","shape","string","required","number","tooltipFormSchema"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Breadcrumb } from \"@gull\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { classList } from \"@utils\";\n\nclass FormValidation extends Component {\n  state = {\n    firstName: \"\",\n    lastName: \"\",\n    phone: \"\",\n    username: \"\",\n    city: \"\",\n    cardNumber: \"4444444444444444\",\n    state: \"\",\n    password: \"\",\n    repassword: \"\",\n    zip: \"\",\n    agree: [], //returns ['on'] when on/checked\n    checkbox1: \"\",\n    checkbox2: \"\",\n    radio: \"\",\n    range: {\n      startDate: new Date(),\n      endDate: (() => {\n        let date = new Date();\n        date.setDate(date.getDate() + 7);\n        return date;\n      })()\n    }\n  };\n\n  handleSubmit = (values, { setSubmitting }) => {\n    console.log(values);\n  };\n\n  render() {\n    return (\n      <div>\n        <Breadcrumb\n          routeSegments={[\n            { name: \"Forms\", path: \"/forms\" },\n            { name: \"Form Validation\" }\n          ]}\n        ></Breadcrumb>\n\n        <div className=\"row\">\n          <div className=\"col-md-8\">\n            <p>\n              For custom Bootstrap form validation messages, you’ll need to add\n              the <code>novalidate</code> boolean attribute to your\n              <code>form</code>. This disables the browser default feedback\n              tooltips, but still provides access to the form validation APIs in\n              JavaScript. Try to submit the form below; our JavaScript will\n              intercept the submit button and relay feedback to you. When\n              attempting to submit, you’ll see the <code>:invalid</code> and\n              <code>:valid</code> styles applied to your form controls.\n            </p>\n            <div className=\"card mb-4\">\n              <div className=\"card-body\">\n                <Formik\n                  initialValues={this.state}\n                  validationSchema={basicFormSchema}\n                  onSubmit={this.handleSubmit}\n                >\n                  {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting\n                  }) => {\n                    return (\n                      <form\n                        className=\"needs-validation\"\n                        onSubmit={handleSubmit}\n                        noValidate\n                      >\n                        <div className=\"form-row\">\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\":\n                                !errors.firstName && touched.firstName,\n                              \"invalid-field\":\n                                errors.firstName && touched.firstName\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom202\">\n                              First name\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom202\"\n                              placeholder=\"First name\"\n                              name=\"firstName\"\n                              value={values.firstName}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"valid-feedback\">Looks good!</div>\n                            <div className=\"invalid-feedback\">\n                              First name is required\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\":\n                                touched.lastName && !errors.lastName,\n                              \"invalid-field\":\n                                touched.lastName && errors.lastName\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom222\">\n                              Last name\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom222\"\n                              placeholder=\"Last name\"\n                              value={values.lastName}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              name=\"lastName\"\n                              required\n                            />\n                            <div className=\"valid-feedback\">Looks good!</div>\n                            <div className=\"invalid-feedback\">\n                              Last name is required\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\":\n                                touched.username && !errors.username,\n                              \"invalid-field\":\n                                touched.username && errors.username\n                            })}\n                          >\n                            <label htmlFor=\"validationCustomUsername\">\n                              Username\n                            </label>\n                            <div className=\"input-group\">\n                              <div className=\"input-group-prepend\">\n                                <span\n                                  className=\"input-group-text\"\n                                  id=\"inputGroupPrepend\"\n                                >\n                                  @\n                                </span>\n                              </div>\n                              <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"validationCustomUsername\"\n                                placeholder=\"Username\"\n                                aria-describedby=\"inputGroupPrepend\"\n                                name=\"username\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.username}\n                                required\n                              />\n                              <div className=\"invalid-feedback\">\n                                Please choose a username.\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"form-row\">\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\": touched.city && !errors.city,\n                              \"invalid-field\": touched.city && errors.city\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom03\">City</label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom03\"\n                              placeholder=\"City\"\n                              name=\"city\"\n                              value={values.city}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"invalid-feedback\">\n                              Please provide a valid city.\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\": touched.state && !errors.state,\n                              \"invalid-field\": touched.state && errors.state\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom204\">State</label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom204\"\n                              placeholder=\"State\"\n                              name=\"state\"\n                              value={values.state}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"invalid-feedback\">\n                              Please provide a valid state.\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\": touched.zip && !errors.zip,\n                              \"invalid-field\": touched.zip && errors.zip\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom05\">Zip</label>\n                            <input\n                              type=\"number\"\n                              className=\"form-control\"\n                              id=\"validationCustom05\"\n                              placeholder=\"Zip\"\n                              name=\"zip\"\n                              value={values.zip}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"invalid-feedback\">\n                              Please provide a valid zip.\n                            </div>\n                          </div>\n                        </div>\n                        <div\n                          className={classList({\n                            \"col-md-4 mb-3\": true,\n                            \"valid-field\":\n                              touched.agree &&\n                              !errors.agree &&\n                              values.agree.length,\n                            \"invalid-field\":\n                              touched.agree &&\n                              errors.agree &&\n                              !values.agree.length\n                          })}\n                        >\n                          <label className=\"checkbox checkbox-primary\">\n                            <input\n                              type=\"checkbox\"\n                              name=\"agree\"\n                              value={values.agree}\n                              checked={values.agree.length}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <span>Agree to terms and conditions</span>\n                            <span className=\"checkmark\"></span>\n                          </label>\n\n                          <div className=\"invalid-feedback\">\n                            You must agree before submitting.\n                          </div>\n                        </div>\n                        <button className=\"btn btn-primary\" type=\"submit\">\n                          Submit form\n                        </button>\n                      </form>\n                    );\n                  }}\n                </Formik>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"col-md-8\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <div className=\"card-title\">Tooltip message</div>\n                <Formik\n                  initialValues={this.state}\n                  validationSchema={basicFormSchema}\n                  onSubmit={this.handleSubmit}\n                >\n                  {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting\n                  }) => {\n                    return (\n                      <form\n                        className=\"needs-validation\"\n                        onSubmit={handleSubmit}\n                        noValidate\n                      >\n                        <div className=\"form-row\">\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\":\n                                !errors.firstName && touched.firstName,\n                              \"invalid-field\":\n                                errors.firstName && touched.firstName\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom01\">\n                              First name\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom01\"\n                              placeholder=\"First name\"\n                              name=\"firstName\"\n                              value={values.firstName}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"valid-tooltip\">Looks good!</div>\n                            <div className=\"invalid-tooltip\">\n                              First name is required\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\":\n                                touched.lastName && !errors.lastName,\n                              \"invalid-field\":\n                                touched.lastName && errors.lastName\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom02\">\n                              Last name\n                            </label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom02\"\n                              placeholder=\"Last name\"\n                              value={values.lastName}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              name=\"lastName\"\n                              required\n                            />\n                            <div className=\"valid-tooltip\">Looks good!</div>\n                            <div className=\"invalid-tooltip\">\n                              Last name is required\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\":\n                                touched.username && !errors.username,\n                              \"invalid-field\":\n                                touched.username && errors.username\n                            })}\n                          >\n                            <label htmlFor=\"validationCustomUsername1\">\n                              Username\n                            </label>\n                            <div className=\"input-group\">\n                              <div className=\"input-group-prepend\">\n                                <span\n                                  className=\"input-group-text\"\n                                  id=\"inputGroupPrepend\"\n                                >\n                                  @\n                                </span>\n                              </div>\n                              <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"validationCustomUsername1\"\n                                placeholder=\"Username\"\n                                aria-describedby=\"inputGroupPrepend\"\n                                name=\"username\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.username}\n                                required\n                              />\n                              <div className=\"invalid-tooltip\">\n                                Please choose a username.\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"form-row\">\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\": touched.city && !errors.city,\n                              \"invalid-field\": touched.city && errors.city\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom203\">City</label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom203\"\n                              placeholder=\"City\"\n                              name=\"city\"\n                              value={values.city}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"invalid-tooltip\">\n                              Please provide a valid city.\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\": touched.state && !errors.state,\n                              \"invalid-field\": touched.state && errors.state\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom04\">State</label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"validationCustom04\"\n                              placeholder=\"State\"\n                              name=\"state\"\n                              value={values.state}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"invalid-tooltip\">\n                              Please provide a valid state.\n                            </div>\n                          </div>\n                          <div\n                            className={classList({\n                              \"col-md-4 mb-3\": true,\n                              \"valid-field\": touched.zip && !errors.zip,\n                              \"invalid-field\": touched.zip && errors.zip\n                            })}\n                          >\n                            <label htmlFor=\"validationCustom205\">Zip</label>\n                            <input\n                              type=\"number\"\n                              className=\"form-control\"\n                              id=\"validationCustom205\"\n                              placeholder=\"Zip\"\n                              name=\"zip\"\n                              value={values.zip}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <div className=\"invalid-tooltip\">\n                              Please provide a valid zip.\n                            </div>\n                          </div>\n                        </div>\n                        <div\n                          className={classList({\n                            \"col-md-4 mb-3\": true,\n                            \"valid-field\":\n                              touched.agree &&\n                              !errors.agree &&\n                              values.agree.length,\n                            \"invalid-field\":\n                              touched.agree &&\n                              errors.agree &&\n                              !values.agree.length\n                          })}\n                        >\n                          <label className=\"checkbox checkbox-primary\">\n                            <input\n                              type=\"checkbox\"\n                              name=\"agree\"\n                              value={values.agree}\n                              checked={values.agree.length}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required\n                            />\n                            <span>Agree to terms and conditions</span>\n                            <span className=\"checkmark\"></span>\n                          </label>\n\n                          <div className=\"invalid-tooltip\">\n                            You must agree before submitting.\n                          </div>\n                        </div>\n                        <button className=\"btn btn-primary\" type=\"submit\">\n                          Submit form\n                        </button>\n                      </form>\n                    );\n                  }}\n                </Formik>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst basicFormSchema = yup.object().shape({\n  firstName: yup.string().required(\"first name is required\"),\n  lastName: yup.string().required(\"last name is required\"),\n  username: yup.string().required(\"select any option\"),\n  city: yup.string().required(\"birthDay is required\"),\n  zip: yup.number().required(\"email is required\"),\n  agree: yup.string().required(\"Required\"),\n  state: yup.string().required(\"Required\")\n});\n\nconst tooltipFormSchema = yup.object().shape({\n  firstName: yup.string().required(\"first name is required\"),\n  lastName: yup.string().required(\"last name is required\"),\n  username: yup.string().required(\"select any option\"),\n  city: yup.string().required(\"birthDay is required\"),\n  zip: yup.number().required(\"email is required\"),\n  agree: yup.string().required(\"Required\"),\n  state: yup.string().required(\"Required\")\n});\n\nexport default FormValidation;\n"]},"metadata":{},"sourceType":"module"}