{"ast":null,"code":"import _objectSpread from\"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/theta-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/theta-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/theta-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/theta-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/theta-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/theta-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import{Card}from\"react-bootstrap\";import{getAllContact,getRecentContact,sendNewMessage,getContactById,getChatRoomByContactId}from\"./chatService\";import ChatSidenav from\"./ChatSidenav\";import ChatContainer from\"./ChatContainer\";import{isMobile}from\"@utils\";var AppChat=/*#__PURE__*/function(_Component){_inherits(AppChat,_Component);var _super=_createSuper(AppChat);function AppChat(){var _this;_classCallCheck(this,AppChat);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={currentUser:{id:\"7863a6802ez0e277a0f98534\"},contactList:[],recentContactList:[],messageList:[],currentChatRoom:\"\",opponentUser:null,open:true,isMobile:false};_this.bottomRef=React.createRef();_this.updateRecentContactList=function(){var id=_this.state.currentUser.id;getRecentContact(id).then(function(data){_this.setState({recentContactList:_toConsumableArray(data.data)});});};_this.scrollToBottom=function(){_this.bottomRef.current.scrollIntoView({behavior:\"smooth\"});};_this.handleContactClick=function(contactId){if(isMobile())_this.toggleSidenav();getContactById(contactId).then(function(_ref){var data=_ref.data;_this.setState({opponentUser:_objectSpread({},data)});});getChatRoomByContactId(_this.state.currentUser.id,contactId).then(function(_ref2){var data=_ref2.data;var chatId=data.chatId,messageList=data.messageList,recentListUpdated=data.recentListUpdated;console.log(chatId);_this.setState({currentChatRoom:chatId,messageList:messageList},function(){_this.bottomRef.scrollTop=9999999999999;});if(recentListUpdated){_this.updateRecentContactList();}});};_this.handleMessageSend=function(message){var id=_this.state.currentUser.id;var _this$state=_this.state,currentChatRoom=_this$state.currentChatRoom,opponentUser=_this$state.opponentUser;if(currentChatRoom===\"\")return;sendNewMessage({chatId:currentChatRoom,text:message,contactId:id,time:new Date()}).then(function(data){_this.setState({messageList:_toConsumableArray(data.data)},function(){_this.bottomRef.scrollTop=9999999999999;});// bot message\nsetTimeout(function(){sendNewMessage({chatId:currentChatRoom,text:\"Hi, I'm \".concat(opponentUser.name,\". Your imaginary friend.\"),contactId:opponentUser.id,time:new Date()}).then(function(data){_this.setState({messageList:_toConsumableArray(data.data)},function(){_this.bottomRef.scrollTop=9999999999999;});});},750);// bot message ends here\n});};_this.setBottomRef=function(ref){_this.bottomRef=ref;};_this.toggleSidenav=function(){return _this.setState({open:!_this.state.open});};return _this;}_createClass(AppChat,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var id=this.state.currentUser.id;getContactById(id).then(function(data){_this2.setState({currentUser:_objectSpread({},data.data)});});getAllContact(this.state.currentUser.id).then(function(data){return _this2.setState({contactList:_toConsumableArray(data.data)});});this.updateRecentContactList();if(isMobile())this.setState({open:false,isMobile:true});if(window)this.windowResizeListener=window.addEventListener(\"resize\",function(e){if(isMobile())_this2.setState({open:false,isMobile:true});else _this2.setState({open:true,isMobile:false});});}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){if(window)window.removeEventListener(\"resize\",this.windowResizeListener);}},{key:\"render\",value:function render(){var _this$state2=this.state,open=_this$state2.open,isMobile=_this$state2.isMobile,currentUser=_this$state2.currentUser,contactList=_this$state2.contactList,recentContactList=_this$state2.recentContactList,messageList=_this$state2.messageList,opponentUser=_this$state2.opponentUser,currentChatRoom=_this$state2.currentChatRoom;return/*#__PURE__*/React.createElement(Card,{className:\"chat-sidebar-container sidebar-container\"},/*#__PURE__*/React.createElement(ChatSidenav,{open:open,isMobile:isMobile,toggleSidenav:this.toggleSidenav,contactList:contactList,recentContactList:recentContactList,handleContactClick:this.handleContactClick}),/*#__PURE__*/React.createElement(ChatContainer,{open:open,isMobile:isMobile,toggleSidenav:this.toggleSidenav,messageList:messageList,currentUser:currentUser,opponentUser:opponentUser,currentChatRoom:currentChatRoom,setBottomRef:this.setBottomRef,handleMessageSend:this.handleMessageSend}));}}]);return AppChat;}(Component);export default AppChat;","map":{"version":3,"sources":["/Users/arjun/Documents/Personal/Test/Theta/UI Theme/theta-demo/src/app/views/app/chat/AppChat.jsx"],"names":["React","Component","Card","getAllContact","getRecentContact","sendNewMessage","getContactById","getChatRoomByContactId","ChatSidenav","ChatContainer","isMobile","AppChat","state","currentUser","id","contactList","recentContactList","messageList","currentChatRoom","opponentUser","open","bottomRef","createRef","updateRecentContactList","then","data","setState","scrollToBottom","current","scrollIntoView","behavior","handleContactClick","contactId","toggleSidenav","chatId","recentListUpdated","console","log","scrollTop","handleMessageSend","message","text","time","Date","setTimeout","name","setBottomRef","ref","window","windowResizeListener","addEventListener","e","removeEventListener"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport {\n  getAllContact,\n  getRecentContact,\n  sendNewMessage,\n  getContactById,\n  getChatRoomByContactId\n} from \"./chatService\";\nimport ChatSidenav from \"./ChatSidenav\";\nimport ChatContainer from \"./ChatContainer\";\nimport { isMobile } from \"@utils\";\n\nclass AppChat extends Component {\n  state = {\n    currentUser: {\n      id: \"7863a6802ez0e277a0f98534\"\n    },\n    contactList: [],\n    recentContactList: [],\n    messageList: [],\n    currentChatRoom: \"\",\n    opponentUser: null,\n    open: true,\n    isMobile: false\n  };\n\n  bottomRef = React.createRef();\n  windowResizeListener;\n\n  componentDidMount() {\n    let { id } = this.state.currentUser;\n    getContactById(id).then(data => {\n      this.setState({\n        currentUser: {\n          ...data.data\n        }\n      });\n    });\n    getAllContact(this.state.currentUser.id).then(data =>\n      this.setState({ contactList: [...data.data] })\n    );\n    this.updateRecentContactList();\n\n    if (isMobile())\n      this.setState({\n        open: false,\n        isMobile: true\n      });\n    if (window)\n      this.windowResizeListener = window.addEventListener(\"resize\", e => {\n        if (isMobile())\n          this.setState({\n            open: false,\n            isMobile: true\n          });\n        else\n          this.setState({\n            open: true,\n            isMobile: false\n          });\n      });\n  }\n\n  componentWillUnmount() {\n    if (window) window.removeEventListener(\"resize\", this.windowResizeListener);\n  }\n\n  updateRecentContactList = () => {\n    let { id } = this.state.currentUser;\n    getRecentContact(id).then(data => {\n      this.setState({\n        recentContactList: [...data.data]\n      });\n    });\n  };\n\n  scrollToBottom = () => {\n    this.bottomRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  handleContactClick = contactId => {\n    if (isMobile()) this.toggleSidenav();\n\n    getContactById(contactId).then(({ data }) => {\n      this.setState({\n        opponentUser: { ...data }\n      });\n    });\n\n    getChatRoomByContactId(this.state.currentUser.id, contactId).then(\n      ({ data }) => {\n        let { chatId, messageList, recentListUpdated } = data;\n        console.log(chatId);\n\n        this.setState(\n          {\n            currentChatRoom: chatId,\n            messageList\n          },\n          () => {\n            this.bottomRef.scrollTop = 9999999999999;\n          }\n        );\n        if (recentListUpdated) {\n          this.updateRecentContactList();\n        }\n      }\n    );\n  };\n\n  handleMessageSend = message => {\n    let { id } = this.state.currentUser;\n    let { currentChatRoom, opponentUser } = this.state;\n    if (currentChatRoom === \"\") return;\n    sendNewMessage({\n      chatId: currentChatRoom,\n      text: message,\n      contactId: id,\n      time: new Date()\n    }).then(data => {\n      this.setState(\n        {\n          messageList: [...data.data]\n        },\n        () => {\n          this.bottomRef.scrollTop = 9999999999999;\n        }\n      );\n\n      // bot message\n      setTimeout(() => {\n        sendNewMessage({\n          chatId: currentChatRoom,\n          text: `Hi, I'm ${opponentUser.name}. Your imaginary friend.`,\n          contactId: opponentUser.id,\n          time: new Date()\n        }).then(data => {\n          this.setState(\n            {\n              messageList: [...data.data]\n            },\n            () => {\n              this.bottomRef.scrollTop = 9999999999999;\n            }\n          );\n        });\n      }, 750);\n      // bot message ends here\n    });\n  };\n\n  setBottomRef = ref => {\n    this.bottomRef = ref;\n  };\n\n  toggleSidenav = () => this.setState({ open: !this.state.open });\n\n  render() {\n    let {\n      open,\n      isMobile,\n      currentUser,\n      contactList,\n      recentContactList,\n      messageList,\n      opponentUser,\n      currentChatRoom\n    } = this.state;\n    return (\n      <Card className=\"chat-sidebar-container sidebar-container\">\n        <ChatSidenav\n          open={open}\n          isMobile={isMobile}\n          toggleSidenav={this.toggleSidenav}\n          contactList={contactList}\n          recentContactList={recentContactList}\n          handleContactClick={this.handleContactClick}\n        ></ChatSidenav>\n        <ChatContainer\n          open={open}\n          isMobile={isMobile}\n          toggleSidenav={this.toggleSidenav}\n          messageList={messageList}\n          currentUser={currentUser}\n          opponentUser={opponentUser}\n          currentChatRoom={currentChatRoom}\n          setBottomRef={this.setBottomRef}\n          handleMessageSend={this.handleMessageSend}\n        ></ChatContainer>\n      </Card>\n    );\n  }\n}\n\nexport default AppChat;\n"]},"metadata":{},"sourceType":"module"}