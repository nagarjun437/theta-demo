{"ast":null,"code":"var _jsxFileName = \"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/theta-demo/src/app/auth/AuthGuard.jsx\";\nimport React, { Component, Fragment } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport AppContext from \"app/appContext\";\nimport GullLayout from \"app/GullLayout/GullLayout\";\nimport { flatMap } from \"lodash\";\n\nclass AuthGuard extends Component {\n  constructor(props, context) {\n    super(props);\n    let {\n      routes\n    } = context;\n    this.state = {\n      authenticated: true,\n      routes\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      routes: flatMap(this.state.routes, item => {\n        if (item.routes) {\n          return [...item.routes];\n        }\n\n        return [item];\n      })\n    });\n\n    if (!this.state.authenticated) {\n      this.redirectRoute(this.props);\n    }\n  }\n\n  componentDidUpdate() {\n    if (!this.state.authenticated) {\n      this.redirectRoute(this.props);\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextState.authenticated !== this.state.authenticated;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      location,\n      user\n    } = props;\n    const {\n      pathname\n    } = location;\n    const matched = state.routes.find(r => r.path === pathname);\n    const authenticated = matched && matched.auth && matched.auth.length ? matched.auth.includes(user.role) : true;\n    return {\n      authenticated\n    };\n  }\n\n  redirectRoute(props) {\n    const {\n      location,\n      history\n    } = props;\n    const {\n      pathname\n    } = location;\n    history.push({\n      pathname: \"/session/signin\",\n      state: {\n        redirectUrl: pathname\n      }\n    });\n  }\n\n  render() {\n    let {\n      route\n    } = this.props;\n    const {\n      authenticated\n    } = this.state;\n    return authenticated ? /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(GullLayout, {\n      route: route,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    })) : null;\n  }\n\n}\n\nAuthGuard.contextType = AppContext;\n\nconst mapStateToProps = state => ({\n  user: state.user\n});\n\nexport default withRouter(connect(mapStateToProps)(AuthGuard));","map":{"version":3,"sources":["/Users/arjun/Documents/Personal/Test/Theta/UI Theme/theta-demo/src/app/auth/AuthGuard.jsx"],"names":["React","Component","Fragment","withRouter","connect","AppContext","GullLayout","flatMap","AuthGuard","constructor","props","context","routes","state","authenticated","componentDidMount","setState","item","redirectRoute","componentDidUpdate","shouldComponentUpdate","nextProps","nextState","getDerivedStateFromProps","location","user","pathname","matched","find","r","path","auth","length","includes","role","history","push","redirectUrl","render","route","contextType","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport AppContext from \"app/appContext\";\nimport GullLayout from \"app/GullLayout/GullLayout\";\nimport { flatMap } from \"lodash\";\nclass AuthGuard extends Component {\n  constructor(props, context) {\n    super(props);\n    let { routes } = context;\n\n    this.state = {\n      authenticated: true,\n      routes\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      routes: flatMap(this.state.routes, item => {\n        if (item.routes) {\n          return [...item.routes];\n        }\n        return [item];\n      })\n    });\n\n    if (!this.state.authenticated) {\n      this.redirectRoute(this.props);\n    }\n  }\n\n  componentDidUpdate() {\n    if (!this.state.authenticated) {\n      this.redirectRoute(this.props);\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextState.authenticated !== this.state.authenticated;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { location, user } = props;\n    const { pathname } = location;\n    const matched = state.routes.find(r => r.path === pathname);\n    const authenticated =\n      matched && matched.auth && matched.auth.length\n        ? matched.auth.includes(user.role)\n        : true;\n\n    return {\n      authenticated\n    };\n  }\n\n  redirectRoute(props) {\n    const { location, history } = props;\n    const { pathname } = location;\n\n    history.push({\n      pathname: \"/session/signin\",\n      state: { redirectUrl: pathname }\n    });\n  }\n\n  render() {\n    let { route } = this.props;\n    const { authenticated } = this.state;\n\n    return authenticated ? (\n      <Fragment>\n        <GullLayout route={route}></GullLayout>\n      </Fragment>\n    ) : null;\n  }\n}\n\nAuthGuard.contextType = AppContext;\n\nconst mapStateToProps = state => ({\n  user: state.user\n});\n\nexport default withRouter(connect(mapStateToProps)(AuthGuard));\n"]},"metadata":{},"sourceType":"module"}