{"ast":null,"code":"import _classCallCheck from\"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/gull-admin/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import firebase from\"firebase/app\";import\"firebase/auth\";import\"firebase/firebase-firestore\";import firebaseConfig from\"./firebaseConfig\";var FirebaseAuthService=//   database;\n//   storage;\nfunction FirebaseAuthService(){// UNCOMMENT IF YOU WANT TO USE FIREBASE\n// this.init();\n// this.auth = firebase.auth();\n// this.firestore = firebase.firestore();\n//   this.database  = firebase.database();\n//   this.storage = firebase.storage();\n// this.googleProvider = new firebase.auth.GoogleAuthProvider();\n// this.facebookProvider = new firebase.auth.FacebookAuthProvider();\n// this.twitterProvider = new firebase.auth.TwitterAuthProvider();\nvar _this=this;_classCallCheck(this,FirebaseAuthService);this.init=function(){firebase.initializeApp(firebaseConfig);};this.checkAuthStatus=function(callback){_this.auth.onAuthStateChanged(callback);};this.signUpWithEmailAndPassword=function(email,password){return _this.auth.createUserWithEmailAndPassword(email,password);};this.signInWithEmailAndPassword=function(email,password){return _this.auth.signInWithEmailAndPassword(email,password);};this.signInWithPopup=function(media){switch(media){case\"google\":return _this.auth.signInWithPopup(_this.googleProvider);case\"facebook\":return _this.auth.signInWithPopup(_this.facebookProvider);case\"twitter\":return _this.auth.signInWithPopup(_this.twitterProvider);default:break;}};this.signInWithPhoneNumber=function(phoneNumber){return _this.auth.signInWithPhoneNumber(phoneNumber);};this.getUserData=function(docId){//   generally it's better to use uid for docId\n_this.firestore.collection(\"users\").doc(docId).get().then(function(doc){console.log(doc.data());});};this.getAllUser=function(){_this.firestore.collection(\"users\").get().then(function(docList){docList.forEach(function(doc){console.log(doc.data());});});};this.signOut=function(){return _this.auth.signOut();};};var instance=new FirebaseAuthService();export default instance;","map":{"version":3,"sources":["/Users/arjun/Documents/Personal/Test/Theta/UI Theme/gull-admin/react/src/app/services/firebase/firebaseAuthService.js"],"names":["firebase","firebaseConfig","FirebaseAuthService","init","initializeApp","checkAuthStatus","callback","auth","onAuthStateChanged","signUpWithEmailAndPassword","email","password","createUserWithEmailAndPassword","signInWithEmailAndPassword","signInWithPopup","media","googleProvider","facebookProvider","twitterProvider","signInWithPhoneNumber","phoneNumber","getUserData","docId","firestore","collection","doc","get","then","console","log","data","getAllUser","docList","forEach","signOut","instance"],"mappings":"6LAAA,MAAOA,CAAAA,QAAP,KAAqB,cAArB,CACA,MAAO,eAAP,CACA,MAAO,6BAAP,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,C,GAEMC,CAAAA,mB,CAGJ;AACA;AAMA,8BAAc,CACZ;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAZY,8DAedC,IAfc,CAeP,UAAM,CACXH,QAAQ,CAACI,aAAT,CAAuBH,cAAvB,EACD,CAjBa,MAmBdI,eAnBc,CAmBI,SAAAC,QAAQ,CAAI,CAC5B,KAAI,CAACC,IAAL,CAAUC,kBAAV,CAA6BF,QAA7B,EACD,CArBa,MAuBdG,0BAvBc,CAuBe,SAACC,KAAD,CAAQC,QAAR,CAAqB,CAChD,MAAO,CAAA,KAAI,CAACJ,IAAL,CAAUK,8BAAV,CAAyCF,KAAzC,CAAgDC,QAAhD,CAAP,CACD,CAzBa,MA2BdE,0BA3Bc,CA2Be,SAACH,KAAD,CAAQC,QAAR,CAAqB,CAChD,MAAO,CAAA,KAAI,CAACJ,IAAL,CAAUM,0BAAV,CAAqCH,KAArC,CAA4CC,QAA5C,CAAP,CACD,CA7Ba,MA+BdG,eA/Bc,CA+BI,SAAAC,KAAK,CAAI,CACzB,OAAQA,KAAR,EACE,IAAK,QAAL,CACE,MAAO,CAAA,KAAI,CAACR,IAAL,CAAUO,eAAV,CAA0B,KAAI,CAACE,cAA/B,CAAP,CAEF,IAAK,UAAL,CACE,MAAO,CAAA,KAAI,CAACT,IAAL,CAAUO,eAAV,CAA0B,KAAI,CAACG,gBAA/B,CAAP,CAEF,IAAK,SAAL,CACE,MAAO,CAAA,KAAI,CAACV,IAAL,CAAUO,eAAV,CAA0B,KAAI,CAACI,eAA/B,CAAP,CAEF,QACE,MAXJ,CAaD,CA7Ca,MA+CdC,qBA/Cc,CA+CU,SAAAC,WAAW,CAAI,CACrC,MAAO,CAAA,KAAI,CAACb,IAAL,CAAUY,qBAAV,CAAgCC,WAAhC,CAAP,CACD,CAjDa,MAmDdC,WAnDc,CAmDA,SAAAC,KAAK,CAAI,CACrB;AACA,KAAI,CAACC,SAAL,CACGC,UADH,CACc,OADd,EAEGC,GAFH,CAEOH,KAFP,EAGGI,GAHH,GAIGC,IAJH,CAIQ,SAAAF,GAAG,CAAI,CACXG,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,IAAJ,EAAZ,EACD,CANH,EAOD,CA5Da,MA8DdC,UA9Dc,CA8DD,UAAM,CACjB,KAAI,CAACR,SAAL,CACGC,UADH,CACc,OADd,EAEGE,GAFH,GAGGC,IAHH,CAGQ,SAAAK,OAAO,CAAI,CACfA,OAAO,CAACC,OAAR,CAAgB,SAAAR,GAAG,CAAI,CACrBG,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,IAAJ,EAAZ,EACD,CAFD,EAGD,CAPH,EAQD,CAvEa,MAyEdI,OAzEc,CAyEJ,UAAM,CACd,MAAO,CAAA,KAAI,CAAC3B,IAAL,CAAU2B,OAAV,EAAP,CACD,CA3Ea,CAab,C,CAiEH,GAAMC,CAAAA,QAAQ,CAAG,GAAIjC,CAAAA,mBAAJ,EAAjB,CAEA,cAAeiC,CAAAA,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firebase-firestore\";\nimport firebaseConfig from \"./firebaseConfig\";\n\nclass FirebaseAuthService {\n  auth;\n  firestore;\n  //   database;\n  //   storage;\n\n  googleProvider;\n  facebookProvider;\n  twitterProvider;\n\n  constructor() {\n    // UNCOMMENT IF YOU WANT TO USE FIREBASE\n\n    // this.init();\n    // this.auth = firebase.auth();\n    // this.firestore = firebase.firestore();\n\n    //   this.database  = firebase.database();\n    //   this.storage = firebase.storage();\n    \n    // this.googleProvider = new firebase.auth.GoogleAuthProvider();\n    // this.facebookProvider = new firebase.auth.FacebookAuthProvider();\n    // this.twitterProvider = new firebase.auth.TwitterAuthProvider();\n  }\n\n  init = () => {\n    firebase.initializeApp(firebaseConfig);\n  };\n\n  checkAuthStatus = callback => {\n    this.auth.onAuthStateChanged(callback);\n  };\n\n  signUpWithEmailAndPassword = (email, password) => {\n    return this.auth.createUserWithEmailAndPassword(email, password);\n  };\n\n  signInWithEmailAndPassword = (email, password) => {\n    return this.auth.signInWithEmailAndPassword(email, password);\n  };\n\n  signInWithPopup = media => {\n    switch (media) {\n      case \"google\":\n        return this.auth.signInWithPopup(this.googleProvider);\n\n      case \"facebook\":\n        return this.auth.signInWithPopup(this.facebookProvider);\n\n      case \"twitter\":\n        return this.auth.signInWithPopup(this.twitterProvider);\n\n      default:\n        break;\n    }\n  };\n\n  signInWithPhoneNumber = phoneNumber => {\n    return this.auth.signInWithPhoneNumber(phoneNumber);\n  };\n\n  getUserData = docId => {\n    //   generally it's better to use uid for docId\n    this.firestore\n      .collection(\"users\")\n      .doc(docId)\n      .get()\n      .then(doc => {\n        console.log(doc.data());\n      });\n  };\n\n  getAllUser = () => {\n    this.firestore\n      .collection(\"users\")\n      .get()\n      .then(docList => {\n        docList.forEach(doc => {\n          console.log(doc.data());\n        });\n      });\n  };\n\n  signOut = () => {\n    return this.auth.signOut();\n  };\n}\n\nconst instance = new FirebaseAuthService();\n\nexport default instance;\n"]},"metadata":{},"sourceType":"module"}