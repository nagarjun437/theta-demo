{"ast":null,"code":"var _jsxFileName = \"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/theta-demo/src/app/views/extra-kits/AppImageCropper.jsx\";\nimport React, { Component } from \"react\";\nimport { Breadcrumb, SimpleCard } from \"@gull\";\nimport ReactCrop from \"react-image-crop\";\nimport { Button } from \"react-bootstrap\";\n\nclass AppImageCropper extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      src: \"/assets/images/photo-wide-3.jpg\",\n      crop: {\n        aspect: 1 / 1\n      },\n      img: null\n    };\n\n    this.handleFileSelect = event => {\n      let file = event.target.files[0];\n      let src = URL.createObjectURL(file);\n      this.setState({\n        src\n      });\n    };\n\n    this.handleCrop = async () => {\n      let {\n        crop,\n        img\n      } = this.state;\n      if (!img) return;\n      let croppedImage = await this.getCroppedImg(img, crop, \"test\");\n      this.setState({\n        src: URL.createObjectURL(croppedImage)\n      });\n    };\n\n    this.getCroppedImg = (image, crop, fileName) => {\n      const canvas = document.createElement(\"canvas\");\n      const scaleX = image.naturalWidth / image.width;\n      const scaleY = image.naturalHeight / image.height;\n      canvas.width = crop.width;\n      canvas.height = crop.height;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height); // As Base64 string\n      // const base64Image = canvas.toDataURL('image/jpeg');\n      // As a blob\n\n      return new Promise((resolve, reject) => {\n        canvas.toBlob(blob => {\n          blob.name = fileName;\n          resolve(blob);\n        }, \"image/jpeg\", 1);\n      });\n    };\n  }\n\n  render() {\n    let {\n      src,\n      crop\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Breadcrumb, {\n      routeSegments: [{\n        name: \"Home\",\n        path: \"/\"\n      }, {\n        name: \"Extra Kits\",\n        path: \"/extra-kits\"\n      }, {\n        name: \"Image Cropper\"\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"upload-single-file\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-rounded mr-3 mb-3\",\n      as: \"span\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex flex-middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"i-Share-on-Cloud\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }, \" \"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }, \"Single File\")))), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"d-none\",\n      onChange: this.handleFileSelect,\n      id: \"upload-single-file\",\n      type: \"file\",\n      accept: \"image/*\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleCrop,\n      className: \"btn-rounded mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, \"Crop Image\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ReactCrop, {\n      src: src,\n      crop: crop,\n      circularCrop: true,\n      onImageLoaded: image => this.setState({\n        img: image\n      }),\n      onChange: newCrop => {\n        this.setState({\n          crop: newCrop\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default AppImageCropper;","map":{"version":3,"sources":["/Users/arjun/Documents/Personal/Test/Theta/UI Theme/theta-demo/src/app/views/extra-kits/AppImageCropper.jsx"],"names":["React","Component","Breadcrumb","SimpleCard","ReactCrop","Button","AppImageCropper","state","src","crop","aspect","img","handleFileSelect","event","file","target","files","URL","createObjectURL","setState","handleCrop","croppedImage","getCroppedImg","image","fileName","canvas","document","createElement","scaleX","naturalWidth","width","scaleY","naturalHeight","height","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","name","render","path","newCrop"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Breadcrumb, SimpleCard } from \"@gull\";\nimport ReactCrop from \"react-image-crop\";\nimport { Button } from \"react-bootstrap\";\n\nclass AppImageCropper extends Component {\n  state = {\n    src: \"/assets/images/photo-wide-3.jpg\",\n    crop: { aspect: 1 / 1 },\n    img: null\n  };\n\n  handleFileSelect = event => {\n    let file = event.target.files[0];\n    let src = URL.createObjectURL(file);\n    this.setState({\n      src\n    });\n  };\n\n  handleCrop = async () => {\n    let { crop, img } = this.state;\n    if (!img) return;\n\n    let croppedImage = await this.getCroppedImg(img, crop, \"test\");\n    this.setState({ src: URL.createObjectURL(croppedImage) });\n  };\n\n  getCroppedImg = (image, crop, fileName) => {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    // As Base64 string\n    // const base64Image = canvas.toDataURL('image/jpeg');\n\n    // As a blob\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(\n        blob => {\n          blob.name = fileName;\n          resolve(blob);\n        },\n        \"image/jpeg\",\n        1\n      );\n    });\n  };\n\n  render() {\n    let { src, crop } = this.state;\n\n    return (\n      <div>\n        <Breadcrumb\n          routeSegments={[\n            { name: \"Home\", path: \"/\" },\n            { name: \"Extra Kits\", path: \"/extra-kits\" },\n            { name: \"Image Cropper\" }\n          ]}\n        ></Breadcrumb>\n        <label htmlFor=\"upload-single-file\">\n          <Button className=\"btn-rounded mr-3 mb-3\" as=\"span\">\n            <div className=\"flex flex-middle\">\n              <i className=\"i-Share-on-Cloud\"> </i>\n              <span>Single File</span>\n            </div>\n          </Button>\n        </label>\n        <input\n          className=\"d-none\"\n          onChange={this.handleFileSelect}\n          id=\"upload-single-file\"\n          type=\"file\"\n          accept=\"image/*\"\n        />\n\n        <Button onClick={this.handleCrop} className=\"btn-rounded mb-3\">\n          Crop Image\n        </Button>\n\n        <div className=\"d-block\">\n          <ReactCrop\n            src={src}\n            crop={crop}\n            circularCrop={true}\n            onImageLoaded={image => this.setState({ img: image })}\n            onChange={newCrop => {\n              this.setState({ crop: newCrop });\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AppImageCropper;\n"]},"metadata":{},"sourceType":"module"}