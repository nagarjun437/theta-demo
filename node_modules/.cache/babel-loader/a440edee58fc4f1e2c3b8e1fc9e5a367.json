{"ast":null,"code":"var _jsxFileName = \"/Users/arjun/Documents/Personal/Test/Theta/UI Theme/gull-admin/react/src/app/views/app/chat/AppChat.jsx\";\nimport React, { Component } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { getAllContact, getRecentContact, sendNewMessage, getContactById, getChatRoomByContactId } from \"./chatService\";\nimport ChatSidenav from \"./ChatSidenav\";\nimport ChatContainer from \"./ChatContainer\";\nimport { isMobile } from \"@utils\";\n\nclass AppChat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: {\n        id: \"7863a6802ez0e277a0f98534\"\n      },\n      contactList: [],\n      recentContactList: [],\n      messageList: [],\n      currentChatRoom: \"\",\n      opponentUser: null,\n      open: true,\n      isMobile: false\n    };\n    this.bottomRef = React.createRef();\n\n    this.updateRecentContactList = () => {\n      let {\n        id\n      } = this.state.currentUser;\n      getRecentContact(id).then(data => {\n        this.setState({\n          recentContactList: [...data.data]\n        });\n      });\n    };\n\n    this.scrollToBottom = () => {\n      this.bottomRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.handleContactClick = contactId => {\n      if (isMobile()) this.toggleSidenav();\n      getContactById(contactId).then(({\n        data\n      }) => {\n        this.setState({\n          opponentUser: { ...data\n          }\n        });\n      });\n      getChatRoomByContactId(this.state.currentUser.id, contactId).then(({\n        data\n      }) => {\n        let {\n          chatId,\n          messageList,\n          recentListUpdated\n        } = data;\n        console.log(chatId);\n        this.setState({\n          currentChatRoom: chatId,\n          messageList\n        }, () => {\n          this.bottomRef.scrollTop = 9999999999999;\n        });\n\n        if (recentListUpdated) {\n          this.updateRecentContactList();\n        }\n      });\n    };\n\n    this.handleMessageSend = message => {\n      let {\n        id\n      } = this.state.currentUser;\n      let {\n        currentChatRoom,\n        opponentUser\n      } = this.state;\n      if (currentChatRoom === \"\") return;\n      sendNewMessage({\n        chatId: currentChatRoom,\n        text: message,\n        contactId: id,\n        time: new Date()\n      }).then(data => {\n        this.setState({\n          messageList: [...data.data]\n        }, () => {\n          this.bottomRef.scrollTop = 9999999999999;\n        }); // bot message\n\n        setTimeout(() => {\n          sendNewMessage({\n            chatId: currentChatRoom,\n            text: `Hi, I'm ${opponentUser.name}. Your imaginary friend.`,\n            contactId: opponentUser.id,\n            time: new Date()\n          }).then(data => {\n            this.setState({\n              messageList: [...data.data]\n            }, () => {\n              this.bottomRef.scrollTop = 9999999999999;\n            });\n          });\n        }, 750); // bot message ends here\n      });\n    };\n\n    this.setBottomRef = ref => {\n      this.bottomRef = ref;\n    };\n\n    this.toggleSidenav = () => this.setState({\n      open: !this.state.open\n    });\n  }\n\n  componentDidMount() {\n    let {\n      id\n    } = this.state.currentUser;\n    getContactById(id).then(data => {\n      this.setState({\n        currentUser: { ...data.data\n        }\n      });\n    });\n    getAllContact(this.state.currentUser.id).then(data => this.setState({\n      contactList: [...data.data]\n    }));\n    this.updateRecentContactList();\n    if (isMobile()) this.setState({\n      open: false,\n      isMobile: true\n    });\n    if (window) this.windowResizeListener = window.addEventListener(\"resize\", e => {\n      if (isMobile()) this.setState({\n        open: false,\n        isMobile: true\n      });else this.setState({\n        open: true,\n        isMobile: false\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    if (window) window.removeEventListener(\"resize\", this.windowResizeListener);\n  }\n\n  render() {\n    let {\n      open,\n      isMobile,\n      currentUser,\n      contactList,\n      recentContactList,\n      messageList,\n      opponentUser,\n      currentChatRoom\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Card, {\n      className: \"chat-sidebar-container sidebar-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ChatSidenav, {\n      open: open,\n      isMobile: isMobile,\n      toggleSidenav: this.toggleSidenav,\n      contactList: contactList,\n      recentContactList: recentContactList,\n      handleContactClick: this.handleContactClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ChatContainer, {\n      open: open,\n      isMobile: isMobile,\n      toggleSidenav: this.toggleSidenav,\n      messageList: messageList,\n      currentUser: currentUser,\n      opponentUser: opponentUser,\n      currentChatRoom: currentChatRoom,\n      setBottomRef: this.setBottomRef,\n      handleMessageSend: this.handleMessageSend,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default AppChat;","map":{"version":3,"sources":["/Users/arjun/Documents/Personal/Test/Theta/UI Theme/gull-admin/react/src/app/views/app/chat/AppChat.jsx"],"names":["React","Component","Card","getAllContact","getRecentContact","sendNewMessage","getContactById","getChatRoomByContactId","ChatSidenav","ChatContainer","isMobile","AppChat","state","currentUser","id","contactList","recentContactList","messageList","currentChatRoom","opponentUser","open","bottomRef","createRef","updateRecentContactList","then","data","setState","scrollToBottom","current","scrollIntoView","behavior","handleContactClick","contactId","toggleSidenav","chatId","recentListUpdated","console","log","scrollTop","handleMessageSend","message","text","time","Date","setTimeout","name","setBottomRef","ref","componentDidMount","window","windowResizeListener","addEventListener","e","componentWillUnmount","removeEventListener","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport {\n  getAllContact,\n  getRecentContact,\n  sendNewMessage,\n  getContactById,\n  getChatRoomByContactId\n} from \"./chatService\";\nimport ChatSidenav from \"./ChatSidenav\";\nimport ChatContainer from \"./ChatContainer\";\nimport { isMobile } from \"@utils\";\n\nclass AppChat extends Component {\n  state = {\n    currentUser: {\n      id: \"7863a6802ez0e277a0f98534\"\n    },\n    contactList: [],\n    recentContactList: [],\n    messageList: [],\n    currentChatRoom: \"\",\n    opponentUser: null,\n    open: true,\n    isMobile: false\n  };\n\n  bottomRef = React.createRef();\n  windowResizeListener;\n\n  componentDidMount() {\n    let { id } = this.state.currentUser;\n    getContactById(id).then(data => {\n      this.setState({\n        currentUser: {\n          ...data.data\n        }\n      });\n    });\n    getAllContact(this.state.currentUser.id).then(data =>\n      this.setState({ contactList: [...data.data] })\n    );\n    this.updateRecentContactList();\n\n    if (isMobile())\n      this.setState({\n        open: false,\n        isMobile: true\n      });\n    if (window)\n      this.windowResizeListener = window.addEventListener(\"resize\", e => {\n        if (isMobile())\n          this.setState({\n            open: false,\n            isMobile: true\n          });\n        else\n          this.setState({\n            open: true,\n            isMobile: false\n          });\n      });\n  }\n\n  componentWillUnmount() {\n    if (window) window.removeEventListener(\"resize\", this.windowResizeListener);\n  }\n\n  updateRecentContactList = () => {\n    let { id } = this.state.currentUser;\n    getRecentContact(id).then(data => {\n      this.setState({\n        recentContactList: [...data.data]\n      });\n    });\n  };\n\n  scrollToBottom = () => {\n    this.bottomRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  handleContactClick = contactId => {\n    if (isMobile()) this.toggleSidenav();\n\n    getContactById(contactId).then(({ data }) => {\n      this.setState({\n        opponentUser: { ...data }\n      });\n    });\n\n    getChatRoomByContactId(this.state.currentUser.id, contactId).then(\n      ({ data }) => {\n        let { chatId, messageList, recentListUpdated } = data;\n        console.log(chatId);\n\n        this.setState(\n          {\n            currentChatRoom: chatId,\n            messageList\n          },\n          () => {\n            this.bottomRef.scrollTop = 9999999999999;\n          }\n        );\n        if (recentListUpdated) {\n          this.updateRecentContactList();\n        }\n      }\n    );\n  };\n\n  handleMessageSend = message => {\n    let { id } = this.state.currentUser;\n    let { currentChatRoom, opponentUser } = this.state;\n    if (currentChatRoom === \"\") return;\n    sendNewMessage({\n      chatId: currentChatRoom,\n      text: message,\n      contactId: id,\n      time: new Date()\n    }).then(data => {\n      this.setState(\n        {\n          messageList: [...data.data]\n        },\n        () => {\n          this.bottomRef.scrollTop = 9999999999999;\n        }\n      );\n\n      // bot message\n      setTimeout(() => {\n        sendNewMessage({\n          chatId: currentChatRoom,\n          text: `Hi, I'm ${opponentUser.name}. Your imaginary friend.`,\n          contactId: opponentUser.id,\n          time: new Date()\n        }).then(data => {\n          this.setState(\n            {\n              messageList: [...data.data]\n            },\n            () => {\n              this.bottomRef.scrollTop = 9999999999999;\n            }\n          );\n        });\n      }, 750);\n      // bot message ends here\n    });\n  };\n\n  setBottomRef = ref => {\n    this.bottomRef = ref;\n  };\n\n  toggleSidenav = () => this.setState({ open: !this.state.open });\n\n  render() {\n    let {\n      open,\n      isMobile,\n      currentUser,\n      contactList,\n      recentContactList,\n      messageList,\n      opponentUser,\n      currentChatRoom\n    } = this.state;\n    return (\n      <Card className=\"chat-sidebar-container sidebar-container\">\n        <ChatSidenav\n          open={open}\n          isMobile={isMobile}\n          toggleSidenav={this.toggleSidenav}\n          contactList={contactList}\n          recentContactList={recentContactList}\n          handleContactClick={this.handleContactClick}\n        ></ChatSidenav>\n        <ChatContainer\n          open={open}\n          isMobile={isMobile}\n          toggleSidenav={this.toggleSidenav}\n          messageList={messageList}\n          currentUser={currentUser}\n          opponentUser={opponentUser}\n          currentChatRoom={currentChatRoom}\n          setBottomRef={this.setBottomRef}\n          handleMessageSend={this.handleMessageSend}\n        ></ChatContainer>\n      </Card>\n    );\n  }\n}\n\nexport default AppChat;\n"]},"metadata":{},"sourceType":"module"}